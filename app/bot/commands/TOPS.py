
from binance import Client  # Binance API
from aiogram import types
import aiohttp
from aiogram.filters import Command
from aiogram.types import Message
from config import settings
from bot import dp
import logging
import numpy as np  # –î–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤ RSI

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è 
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

@dp.message(Command(commands=['cex_eth']))
async def top_ethereum_handler(message: Message):
    try:
        # –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã Bitget API
        coins_url = "https://api.bitget.com/api/spot/v1/public/currencies"
        tickers_url = "https://api.bitget.com/api/spot/v1/market/tickers"
        headers = {'Content-Type': 'application/json'}

        async with aiohttp.ClientSession() as session:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–æ–Ω–µ—Ç
            async with session.get(coins_url, headers=headers) as coins_response:
                logging.info(f"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ API (coins): {coins_response.status}")

                if coins_response.status == 200:
                    coins_data = await coins_response.json()
                    logging.debug(f"–¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ (coins): {coins_data}")

                    if 'data' not in coins_data or not coins_data['data']:
                        await message.reply("‚ùóÔ∏è–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –º–æ–Ω–µ—Ç–∞—Ö.")
                        return

                    coins = coins_data['data']

                    # –§–∏–ª—å—Ç—Ä—É–µ–º –º–æ–Ω–µ—Ç—ã –Ω–∞ Ethereum
                    eth_tokens = []
                    for coin in coins:
                        chains = coin.get('chains', [])
                        for chain_info in chains:
                            if chain_info.get('chain', '').upper() in ['ETH', 'ERC20', 'ETHEREUM']:
                                eth_tokens.append(coin['coinName'])
                                break  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –º–æ–Ω–µ—Ç–µ

                    if not eth_tokens:
                        await message.reply("‚ùóÔ∏è–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–æ–∫–µ–Ω—ã –Ω–∞ –±–ª–æ–∫—á–µ–π–Ω–µ Ethereum.")
                        return

                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ü–µ–Ω–∞—Ö –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∑–∞ 24 —á–∞—Å–∞
                    async with session.get(tickers_url, headers=headers) as tickers_response:
                        logging.info(f"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ API (tickers): {tickers_response.status}")

                        if tickers_response.status == 200:
                            tickers_data = await tickers_response.json()
                            logging.debug(f"–¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ (tickers): {tickers_data}")

                            if 'data' not in tickers_data or not tickers_data['data']:
                                await message.reply("‚ùóÔ∏è–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ü–µ–Ω–∞—Ö.")
                                return

                            tickers = tickers_data['data']

                            # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Ç–∏–∫–µ—Ä–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
                            tickers_dict = {
                                item['symbol']: item for item in tickers
                            }

                            # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ä–æ—Å—Ç–µ –º–æ–Ω–µ—Ç
                            growth_data = []

                            for symbol, ticker_info in tickers_dict.items():
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∏–º–≤–æ–ª –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ USDT
                                if not symbol.endswith('USDT'):
                                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –Ω–µ USDT –ø–∞—Ä–∞

                                # –ò–∑–≤–ª–µ–∫–∞–µ–º –±–∞–∑–æ–≤—É—é –≤–∞–ª—é—Ç—É (—Ç–æ–∫–µ–Ω)
                                token = symbol[:-4]  # –£–¥–∞–ª—è–µ–º 'USDT' –∏–∑ –∫–æ–Ω—Ü–∞ —Å–∏–º–≤–æ–ª–∞

                                if token not in eth_tokens:
                                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ–∫–µ–Ω—ã, –Ω–µ –æ—Ç–Ω–æ—Å—è—â–∏–µ—Å—è –∫ Ethereum

                                last_price = float(ticker_info.get('close', 0))
                                open_price = float(ticker_info.get('openUtc0', 0)) or float(ticker_info.get('open24h', 0))

                                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω
                                logging.debug(f"–¢–æ–∫–µ–Ω: {token}, Symbol: {symbol}, Open Price: {open_price}, Last Price: {last_price}")

                                if open_price > 0:
                                    change_percent = ((last_price - open_price) / open_price) * 100
                                else:
                                    change_percent = 0

                                growth_data.append({
                                    'symbol': symbol,        # –ü–æ–ª–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
                                    'token_name': token,     # –ò–º—è —Ç–æ–∫–µ–Ω–∞ –±–µ–∑ USDT
                                    'last_price': last_price,
                                    'change_percent': change_percent
                                })

                            if not growth_data:
                                await message.reply("‚ùóÔ∏è–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ä–æ—Å—Ç–µ —Ç–æ–∫–µ–Ω–æ–≤.")
                                return

                            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç—É —Ä–æ—Å—Ç–∞
                            sorted_tokens = sorted(growth_data, key=lambda x: x['change_percent'], reverse=True)

                            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –æ–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
                            title = f"üåü <b>–¢–æ–ø –Ω–∞–∏–±–æ–ª–µ–µ –±—ã—Å—Ç—Ä–æ—Ä–∞—Å—Ç—É—â–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ Ethereum –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞:</b>\n\n"
                            response_text = title

                            # –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è Spot Trading –Ω–∞ Bitget
                            base_url = "https://www.bitget.com/spot/"

                            for i, token_info in enumerate(sorted_tokens[:10], 1):  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–≤–æ–¥ 10 —Ç–æ–∫–µ–Ω–∞–º–∏
                                position_emoji = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â" if i == 3 else "‚≠êÔ∏è"
                                symbol = token_info['symbol']          # –ü–æ–ª–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (—Å USDT)
                                token_name = token_info['token_name']  # –ò–º—è —Ç–æ–∫–µ–Ω–∞ –±–µ–∑ USDT
                                price = token_info['last_price']
                                change = token_info['change_percent']

                                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ—Ä–≥–æ–≤—É—é –ø–∞—Ä—É
                                trade_link = f"{base_url}{symbol}"

                                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—É –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –Ω–∞—É—á–Ω–æ–π –Ω–æ—Ç–∞—Ü–∏–∏
                                if price < 0.0001:
                                    price_str = f"{price:.8f}"
                                elif price < 0.01:
                                    price_str = f"{price:.6f}"
                                elif price < 1:
                                    price_str = f"{price:.4f}"
                                else:
                                    price_str = f"{price:.2f}"

                                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–æ –¥–≤—É—Ö –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
                                change_str = f"{change:.2f}"

                                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —Ç–æ–ª—å–∫–æ –∏–º–µ–Ω–∏ —Ç–æ–∫–µ–Ω–∞
                                response_text += (
                                    f"{position_emoji} <b><a href='{trade_link}'>{i}. {token_name}</a></b>\n"
                                    f"   üí∞ <b>–¶–µ–Ω–∞:</b> ${price_str}\n"
                                    f"   üìà <b>–†–æ—Å—Ç –∑–∞ 24 —á–∞—Å–∞:</b> {change_str}%\n\n"
                                )

                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –±–µ–∑ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–µ–≤—å—é —Å—Å—ã–ª–æ–∫
                            await message.reply(response_text, parse_mode="HTML", disable_web_page_preview=True)

                        else:
                            error_data = await tickers_response.text()
                            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ API (tickers): {error_data}")
                            await message.reply(f"‚ùóÔ∏è–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ü–µ–Ω–∞—Ö. –°—Ç–∞—Ç—É—Å: {tickers_response.status}")

                else:
                    error_data = await coins_response.text()
                    logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ API (coins): {error_data}")
                    await message.reply(f"‚ùóÔ∏è–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –º–æ–Ω–µ—Ç–∞—Ö. –°—Ç–∞—Ç—É—Å: {coins_response.status}")

    except Exception as e:
        await message.reply("‚ùóÔ∏è–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")
        logging.error(f"–û—à–∏–±–∫–∞: {e}", exc_info=True)


@dp.message(Command(commands=['cex_sol']))
async def top_solana_handler(message: Message):
    try:
        # –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã Bitget API
        coins_url = "https://api.bitget.com/api/spot/v1/public/currencies"
        tickers_url = "https://api.bitget.com/api/spot/v1/market/tickers"
        headers = {'Content-Type': 'application/json'}

        async with aiohttp.ClientSession() as session:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–æ–Ω–µ—Ç
            async with session.get(coins_url, headers=headers) as coins_response:
                logging.info(f"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ API (coins): {coins_response.status}")

                if coins_response.status == 200:
                    coins_data = await coins_response.json()
                    logging.debug(f"–¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ (coins): {coins_data}")

                    if 'data' not in coins_data or not coins_data['data']:
                        await message.reply("‚ùóÔ∏è–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –º–æ–Ω–µ—Ç–∞—Ö.")
                        return

                    coins = coins_data['data']

                    # –§–∏–ª—å—Ç—Ä—É–µ–º –º–æ–Ω–µ—Ç—ã –Ω–∞ Solana
                    sol_tokens = []
                    for coin in coins:
                        chains = coin.get('chains', [])
                        for chain_info in chains:
                            if chain_info.get('chain', '').upper() in ['SOL', 'SOLANA']:
                                sol_tokens.append(coin['coinName'])
                                break  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –º–æ–Ω–µ—Ç–µ

                    if not sol_tokens:
                        await message.reply("‚ùóÔ∏è–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–æ–∫–µ–Ω—ã –Ω–∞ –±–ª–æ–∫—á–µ–π–Ω–µ Solana.")
                        return

                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ü–µ–Ω–∞—Ö –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∑–∞ 24 —á–∞—Å–∞
                    async with session.get(tickers_url, headers=headers) as tickers_response:
                        logging.info(f"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ API (tickers): {tickers_response.status}")

                        if tickers_response.status == 200:
                            tickers_data = await tickers_response.json()
                            logging.debug(f"–¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ (tickers): {tickers_data}")

                            if 'data' not in tickers_data or not tickers_data['data']:
                                await message.reply("‚ùóÔ∏è–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ü–µ–Ω–∞—Ö.")
                                return

                            tickers = tickers_data['data']

                            # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Ç–∏–∫–µ—Ä–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
                            tickers_dict = {
                                item['symbol']: item for item in tickers
                            }

                            # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ä–æ—Å—Ç–µ –º–æ–Ω–µ—Ç
                            growth_data = []

                            for symbol, ticker_info in tickers_dict.items():
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∏–º–≤–æ–ª –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ USDT
                                if not symbol.endswith('USDT'):
                                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –Ω–µ USDT –ø–∞—Ä–∞

                                # –ò–∑–≤–ª–µ–∫–∞–µ–º –±–∞–∑–æ–≤—É—é –≤–∞–ª—é—Ç—É (—Ç–æ–∫–µ–Ω)
                                token = symbol[:-4]  # –£–¥–∞–ª—è–µ–º 'USDT' –∏–∑ –∫–æ–Ω—Ü–∞ —Å–∏–º–≤–æ–ª–∞

                                if token not in sol_tokens:
                                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ–∫–µ–Ω—ã, –Ω–µ –æ—Ç–Ω–æ—Å—è—â–∏–µ—Å—è –∫ Solana

                                last_price = float(ticker_info.get('close', 0))
                                open_price = float(ticker_info.get('openUtc0', 0)) or float(ticker_info.get('open24h', 0))

                                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω
                                logging.debug(f"–¢–æ–∫–µ–Ω: {token}, Symbol: {symbol}, Open Price: {open_price}, Last Price: {last_price}")

                                if open_price > 0:
                                    change_percent = ((last_price - open_price) / open_price) * 100
                                else:
                                    change_percent = 0

                                growth_data.append({
                                    'symbol': symbol,        # –ü–æ–ª–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
                                    'token_name': token,     # –ò–º—è —Ç–æ–∫–µ–Ω–∞ –±–µ–∑ USDT
                                    'last_price': last_price,
                                    'change_percent': change_percent
                                })

                            if not growth_data:
                                await message.reply("‚ùóÔ∏è–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ä–æ—Å—Ç–µ —Ç–æ–∫–µ–Ω–æ–≤.")
                                return

                            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç—É —Ä–æ—Å—Ç–∞
                            sorted_tokens = sorted(growth_data, key=lambda x: x['change_percent'], reverse=True)

                            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –æ–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
                            title = f"üåü <b>–¢–æ–ø –Ω–∞–∏–±–æ–ª–µ–µ –±—ã—Å—Ç—Ä–æ—Ä–∞—Å—Ç—É—â–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ Solana –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞:</b>\n\n"
                            response_text = title

                            # –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è Spot Trading –Ω–∞ Bitget
                            base_url = "https://www.bitget.com/spot/"

                            for i, token_info in enumerate(sorted_tokens[:10], 1):  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–≤–æ–¥ 10 —Ç–æ–∫–µ–Ω–∞–º–∏
                                position_emoji = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â" if i == 3 else "‚≠êÔ∏è"
                                symbol = token_info['symbol']          # –ü–æ–ª–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (—Å USDT)
                                token_name = token_info['token_name']  # –ò–º—è —Ç–æ–∫–µ–Ω–∞ –±–µ–∑ USDT
                                price = token_info['last_price']
                                change = token_info['change_percent']

                                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ—Ä–≥–æ–≤—É—é –ø–∞—Ä—É
                                trade_link = f"{base_url}{symbol}"

                                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—É –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –Ω–∞—É—á–Ω–æ–π –Ω–æ—Ç–∞—Ü–∏–∏
                                if price < 0.0001:
                                    price_str = f"{price:.8f}"
                                elif price < 0.01:
                                    price_str = f"{price:.6f}"
                                elif price < 1:
                                    price_str = f"{price:.4f}"
                                else:
                                    price_str = f"{price:.2f}"

                                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–æ –¥–≤—É—Ö –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
                                change_str = f"{change:.2f}"

                                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —Ç–æ–ª—å–∫–æ –∏–º–µ–Ω–∏ —Ç–æ–∫–µ–Ω–∞
                                response_text += (
                                    f"{position_emoji} <b><a href='{trade_link}'>{i}. {token_name}</a></b>\n"
                                    f"   üí∞ <b>–¶–µ–Ω–∞:</b> ${price_str}\n"
                                    f"   üìà <b>–†–æ—Å—Ç –∑–∞ 24 —á–∞—Å–∞:</b> {change_str}%\n\n"
                                )

                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –±–µ–∑ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–µ–≤—å—é —Å—Å—ã–ª–æ–∫
                            await message.reply(response_text, parse_mode="HTML", disable_web_page_preview=True)

                        else:
                            error_data = await tickers_response.text()
                            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ API (tickers): {error_data}")
                            await message.reply(f"‚ùóÔ∏è–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ü–µ–Ω–∞—Ö. –°—Ç–∞—Ç—É—Å: {tickers_response.status}")

                else:
                    error_data = await coins_response.text()
                    logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ API (coins): {error_data}")
                    await message.reply(f"‚ùóÔ∏è–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –º–æ–Ω–µ—Ç–∞—Ö. –°—Ç–∞—Ç—É—Å: {coins_response.status}")

    except Exception as e:
        await message.reply("‚ùóÔ∏è–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")
        logging.error(f"–û—à–∏–±–∫–∞: {e}", exc_info=True)




@dp.message(Command(commands=['cex_ton']))
async def top_ton_handler(message: Message):
    try:
        # –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã Bitget API
        coins_url = "https://api.bitget.com/api/spot/v1/public/currencies"
        tickers_url = "https://api.bitget.com/api/spot/v1/market/tickers"
        headers = {'Content-Type': 'application/json'}

        async with aiohttp.ClientSession() as session:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–æ–Ω–µ—Ç
            async with session.get(coins_url, headers=headers) as coins_response:
                logging.info(f"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ API (coins): {coins_response.status}")

                if coins_response.status == 200:
                    coins_data = await coins_response.json()
                    logging.debug(f"–¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ (coins): {coins_data}")

                    if 'data' not in coins_data or not coins_data['data']:
                        await message.reply("‚ùóÔ∏è–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –º–æ–Ω–µ—Ç–∞—Ö.")
                        return

                    coins = coins_data['data']

                    # –§–∏–ª—å—Ç—Ä—É–µ–º –º–æ–Ω–µ—Ç—ã –Ω–∞ –±–ª–æ–∫—á–µ–π–Ω–µ TON
                    ton_tokens = []
                    for coin in coins:
                        chains = coin.get('chains', [])
                        for chain_info in chains:
                            if chain_info.get('chain', '').upper() in ['TON', 'TONCOIN']:
                                ton_tokens.append(coin['coinName'] if coin['coinName'] != "TONCOIN" else "TON")
                                break  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –º–æ–Ω–µ—Ç–µ

                    if not ton_tokens:
                        await message.reply("‚ùóÔ∏è–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–æ–∫–µ–Ω—ã –Ω–∞ –±–ª–æ–∫—á–µ–π–Ω–µ TON.")
                        return

                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ü–µ–Ω–∞—Ö –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∑–∞ 24 —á–∞—Å–∞
                    async with session.get(tickers_url, headers=headers) as tickers_response:
                        logging.info(f"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ API (tickers): {tickers_response.status}")

                        if tickers_response.status == 200:
                            tickers_data = await tickers_response.json()
                            logging.debug(f"–¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ (tickers): {tickers_data}")

                            if 'data' not in tickers_data or not tickers_data['data']:
                                await message.reply("‚ùóÔ∏è–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ü–µ–Ω–∞—Ö.")
                                return

                            tickers = tickers_data['data']

                            # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Ç–∏–∫–µ—Ä–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
                            tickers_dict = {
                                item['symbol']: item for item in tickers
                            }

                            # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ä–æ—Å—Ç–µ –º–æ–Ω–µ—Ç
                            growth_data = []

                            for symbol, ticker_info in tickers_dict.items():
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∏–º–≤–æ–ª –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ USDT
                                if not symbol.endswith('USDT'):
                                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –Ω–µ USDT –ø–∞—Ä–∞

                                # –ò–∑–≤–ª–µ–∫–∞–µ–º –±–∞–∑–æ–≤—É—é –≤–∞–ª—é—Ç—É (—Ç–æ–∫–µ–Ω)
                                token = symbol[:-4]  # –£–¥–∞–ª—è–µ–º 'USDT' –∏–∑ –∫–æ–Ω—Ü–∞ —Å–∏–º–≤–æ–ª–∞

                                if token not in ton_tokens:
                                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ–∫–µ–Ω—ã, –Ω–µ –æ—Ç–Ω–æ—Å—è—â–∏–µ—Å—è –∫ –±–ª–æ–∫—á–µ–π–Ω—É TON

                                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª—É—á–∞–π, –∫–æ–≥–¥–∞ —Ç–æ–∫–µ–Ω "TONCOIN" –º–µ–Ω—è–µ—Ç—Å—è –Ω–∞ "TON"
                                if token == "TONCOIN":
                                    token = "TON"

                                last_price = float(ticker_info.get('close', 0))
                                open_price = float(ticker_info.get('openUtc0', 0)) or float(ticker_info.get('open24h', 0))

                                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω
                                logging.debug(f"–¢–æ–∫–µ–Ω: {token}, Symbol: {symbol}, Open Price: {open_price}, Last Price: {last_price}")

                                if open_price > 0:
                                    change_percent = ((last_price - open_price) / open_price) * 100
                                else:
                                    change_percent = 0

                                growth_data.append({
                                    'symbol': symbol if token != "TON" else "TONUSDT",  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∏–º–≤–æ–ª TONUSDT
                                    'token_name': token,     # –ò–º—è —Ç–æ–∫–µ–Ω–∞ –±–µ–∑ USDT
                                    'last_price': last_price,
                                    'change_percent': change_percent
                                })

                            if not growth_data:
                                await message.reply("‚ùóÔ∏è–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–æ–∫–µ–Ω—ã —Å –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º.")
                                return

                            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç—É —Ä–æ—Å—Ç–∞
                            sorted_tokens = sorted(growth_data, key=lambda x: x['change_percent'], reverse=True)

                            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –æ–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
                            title = f"üåü <b>–¢–æ–ø –Ω–∞–∏–±–æ–ª–µ–µ –±—ã—Å—Ç—Ä–æ—Ä–∞—Å—Ç—É—â–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ TON –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞:</b>\n\n"
                            response_text = title

                            # –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è Spot Trading –Ω–∞ Bitget
                            base_url = "https://www.bitget.com/spot/"

                            for i, token_info in enumerate(sorted_tokens[:10], 1):  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–≤–æ–¥ 10 —Ç–æ–∫–µ–Ω–∞–º–∏
                                position_emoji = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â" if i == 3 else "‚≠êÔ∏è"
                                symbol = token_info['symbol']          # –ü–æ–ª–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (—Å USDT)
                                token_name = token_info['token_name']  # –ò–º—è —Ç–æ–∫–µ–Ω–∞ –±–µ–∑ USDT
                                price = token_info['last_price']
                                change = token_info['change_percent']

                                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ—Ä–≥–æ–≤—É—é –ø–∞—Ä—É
                                trade_link = f"{base_url}{symbol}"

                                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—É –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –Ω–∞—É—á–Ω–æ–π –Ω–æ—Ç–∞—Ü–∏–∏
                                if price < 0.0001:
                                    price_str = f"{price:.8f}"
                                elif price < 0.01:
                                    price_str = f"{price:.6f}"
                                elif price < 1:
                                    price_str = f"{price:.4f}"
                                else:
                                    price_str = f"{price:.2f}"

                                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–æ –¥–≤—É—Ö –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
                                change_str = f"{change:.2f}"

                                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —Ç–æ–ª—å–∫–æ –∏–º–µ–Ω–∏ —Ç–æ–∫–µ–Ω–∞
                                response_text += (
                                    f"{position_emoji} <b><a href='{trade_link}'>{i}. {token_name}</a></b>\n"
                                    f"   üí∞ <b>–¶–µ–Ω–∞:</b> ${price_str}\n"
                                    f"   üìà <b>–†–æ—Å—Ç –∑–∞ 24 —á–∞—Å–∞:</b> {change_str}%\n\n"
                                )

                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –±–µ–∑ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–µ–≤—å—é —Å—Å—ã–ª–æ–∫
                            await message.reply(response_text, parse_mode="HTML", disable_web_page_preview=True)

                        else:
                            error_data = await tickers_response.text()
                            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ API (tickers): {error_data}")
                            await message.reply(f"‚ùóÔ∏è–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ü–µ–Ω–∞—Ö. –°—Ç–∞—Ç—É—Å: {tickers_response.status}")

                else:
                    error_data = await coins_response.text()
                    logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ API (coins): {error_data}")
                    await message.reply(f"‚ùóÔ∏è–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –º–æ–Ω–µ—Ç–∞—Ö. –°—Ç–∞—Ç—É—Å: {coins_response.status}")

    except Exception as e:
        await message.reply("‚ùóÔ∏è–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")
        logging.error(f"–û—à–∏–±–∫–∞: {e}", exc_info=True)












