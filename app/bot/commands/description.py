import aiohttp  # –î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤
from aiogram import types  # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–∏–ø–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö Telegram
from aiogram.filters import Command  # –î–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥
from aiogram.types import Message  # –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π Telegram
from bot import dp  # –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
from deep_translator import GoogleTranslator  # –î–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞

from app.database.crud import get_user_language  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

@dp.message(Command(commands=['description']))
async def get_crypto_description(message: Message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        language = get_user_language(message.from_user.id)  # –£–±—Ä–∞–ª–∏ 'await'
        if language not in ['en', 'ru']:
            language = 'en'  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ —è–∑—ã–∫ –Ω–µ –∑–∞–¥–∞–Ω –∏–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞, –µ—Å–ª–∏ –Ω—É–∂–µ–Ω –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Ä—É—Å—Å–∫–∏–π
        translator = None
        if language == 'ru':
            translator = GoogleTranslator(source='en', target='ru')

        # –°–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–æ–≤
        messages = {
            'en': {
                'usage': "‚ùóÔ∏è Please use the command in the format: /description [symbol]",
                'api_error': "‚ùå Failed to retrieve data for the specified cryptocurrency.",
                'not_found': "‚ùå Data for the specified cryptocurrency not found.",
                'error': "‚ö†Ô∏è An error occurred while fetching the data. Please try again later.",
                'fields': (
                    "ü™ô **{full_name} - ${symbol}**\n\n"
                    "üíµ **Current Price**: ${current_price:,.2f}\n"
                    "üìä **Market Cap**: ${market_cap:,.2f}\n"
                    "üîÑ **24h Trading Volume**: ${volume_24h:,.2f}\n\n"
                    "‚ÑπÔ∏è **Description**: {description}\n\n"
                    "üåê **Website**: {website}\n"
                )
            },
            'ru': {
                'usage': "‚ùóÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /description [symbol]",
                'api_error': "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã.",
                'not_found': "‚ùå –î–∞–Ω–Ω—ã–µ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
                'error': "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                'fields': (
                    "ü™ô **{full_name} - ${symbol}**\n\n"
                    "üíµ **–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞**: ${current_price:,.2f}\n"
                    "üìä **–†—ã–Ω–æ—á–Ω–∞—è –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è**: ${market_cap:,.2f}\n"
                    "üîÑ **–û–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤ (24—á)**: ${volume_24h:,.2f}\n\n"
                    "‚ÑπÔ∏è **–û–ø–∏—Å–∞–Ω–∏–µ**: {description}\n\n"
                    "üåê **–í–µ–±-—Å–∞–π—Ç**: {website}\n"
                )
            }
        }

        lang = messages.get(language, messages['en'])  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 'en'

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–∏–º–≤–æ–ª –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        args = message.text.split()
        if len(args) != 2:
            await message.reply(lang['usage'])
            return

        crypto_symbol = args[1].upper()

        # –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö —Å CryptoCompare API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        url = "https://min-api.cryptocompare.com/data/all/coinlist"
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                if response.status != 200:
                    await message.reply(lang['api_error'])
                    return

                data = await response.json()

                if 'Data' not in data or crypto_symbol not in data['Data']:
                    await message.reply(lang['not_found'])
                    return

                crypto_data = data['Data'][crypto_symbol]

                # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è
                name = crypto_data.get('CoinName', crypto_symbol)
                full_name = crypto_data.get('FullName', name)
                description = crypto_data.get('Description', 'No description available.')
                website = crypto_data.get('AssetWebsiteUrl', 'N/A')

                # –ü–µ—Ä–µ–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ
                if language == 'ru' and description != 'No description available.':
                    try:
                        description = translator.translate(description)
                    except Exception as e:
                        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∞, –æ—Å—Ç–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
                        print(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")

        # –ó–∞–ø—Ä–æ—Å —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã, –æ–±—ä–µ–º–∞ —Ç–æ—Ä–≥–æ–≤ –∏ —Ä—ã–Ω–æ—á–Ω–æ–π –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏
        price_url = f"https://min-api.cryptocompare.com/data/pricemultifull?fsyms={crypto_symbol}&tsyms=USD"
        async with aiohttp.ClientSession() as session:
            async with session.get(price_url) as response:
                if response.status != 200:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∫–∞–∫ 'N/A'
                    current_price = 'N/A'
                    market_cap = 'N/A'
                    volume_24h = 'N/A'
                else:
                    price_data = await response.json()

                    if not price_data or 'RAW' not in price_data or crypto_symbol not in price_data['RAW']:
                        current_price = 'N/A'
                        market_cap = 'N/A'
                        volume_24h = 'N/A'
                    else:
                        price_info = price_data['RAW'][crypto_symbol]['USD']
                        current_price = price_info.get('PRICE', 'N/A')
                        market_cap = price_info.get('MKTCAP', 'N/A')
                        volume_24h = price_info.get('VOLUME24HOUR', 'N/A')

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
        try:
            if language == 'ru':
                response_message = lang['fields'].format(
                    full_name=full_name,
                    symbol=crypto_symbol,
                    current_price=float(current_price) if current_price != 'N/A' else current_price,
                    market_cap=float(market_cap) if market_cap != 'N/A' else market_cap,
                    volume_24h=float(volume_24h) if volume_24h != 'N/A' else volume_24h,
                    description=description,
                    website=website
                )
            else:
                response_message = lang['fields'].format(
                    full_name=full_name,
                    symbol=crypto_symbol,
                    current_price=float(current_price) if current_price != 'N/A' else current_price,
                    market_cap=float(market_cap) if market_cap != 'N/A' else market_cap,
                    volume_24h=float(volume_24h) if volume_24h != 'N/A' else volume_24h,
                    description=description,
                    website=website
                )
        except Exception as e:
            await message.reply(lang['error'])
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return

        await message.reply(response_message, parse_mode="Markdown")

    except Exception as e:
        # –í —Å–ª—É—á–∞–µ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–æ–π –æ—à–∏–±–∫–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        error_messages = {
            'en': "‚ö†Ô∏è An error occurred while fetching the data. Please try again later.",
            'ru': "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        }
        # –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —è–∑—ã–∫, –µ—Å–ª–∏ –æ–Ω —É–∂–µ –±—ã–ª –ø–æ–ª—É—á–µ–Ω
        language = language if 'language' in locals() else 'en'
        await message.reply(error_messages.get(language, error_messages['en']))
        print(f"–û—à–∏–±–∫–∞: {e}")
