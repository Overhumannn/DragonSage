import pandas as pd
import pandas_ta as ta
from aiogram import types
from aiogram.filters import Command
from aiogram.types import Message
from bot import dp
from config import settings
import aiohttp
from app.database.crud import get_user_language  # –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å Binance
async def get_historical_data(symbol, interval='1h', limit=100):
    url = f"https://api.binance.com/api/v3/klines?symbol={symbol}&interval={interval}&limit={limit}"
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            if response.status == 200:
                klines = await response.json()
                data = pd.DataFrame(klines, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume',
                                                     'close_time', 'quote_asset_volume', 'number_of_trades',
                                                     'taker_buy_base_asset_volume', 'taker_buy_quote_asset_volume',
                                                     'ignore'])
                data['close'] = data['close'].astype(float)
                data['high'] = data['high'].astype(float)
                data['low'] = data['low'].astype(float)
                data['volume'] = data['volume'].astype(float)
                return data
            else:
                raise Exception(f"Error fetching data: {response.status}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã –∏ –æ–±—ä–µ–º–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
async def get_current_price_and_hourly_volume(symbol):
    data = await get_historical_data(symbol, interval='1h', limit=1)
    price = data['close'].iloc[-1]
    volume = data['volume'].iloc[-1]
    return price, volume

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
async def get_technical_indicators(symbol):
    data = await get_historical_data(symbol)
    price, volume = await get_current_price_and_hourly_volume(symbol)

    # –†–∞—Å—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ (ATR / close price * 100) –¥–ª—è –ø—Ä–æ—Ü–µ–Ω—Ç–∞
    atr_value = ta.atr(data['high'], data['low'], data['close'], length=14).iloc[-1]
    avg_volatility = (atr_value / data['close'].iloc[-1]) * 100

    # –†–∞—Å—Å—á–µ—Ç –¥—Ä—É–≥–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ —Å —è–≤–Ω—ã–º –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ–º volume –∫ float64
    rsi_value = ta.rsi(data['close'], length=14).iloc[-1]
    mfi_value = ta.mfi(data['high'], data['low'], data['close'], data['volume'].astype('float64'), length=14).iloc[-1]
    cci_value = ta.cci(data['high'], data['low'], data['close'], length=14).iloc[-1]

    indicators = {
        "Price": price,
        "Volume": volume,
        "AvgVolatility": avg_volatility,
        "RSI": rsi_value,
        "MFI": mfi_value,
        "CCI": cci_value,
        "BBands": ta.bbands(data['close'], length=20, std=2).iloc[-1].tolist(),
        "SMA": ta.sma(data['close'], length=50).iloc[-1],
        "MOM": ta.mom(data['close'], length=10).iloc[-1],
        "MACD": ta.macd(data['close'], fast=12, slow=26, signal=9)['MACD_12_26_9'].iloc[-1],
        "ADX": ta.adx(data['high'], data['low'], data['close'], length=14)['ADX_14'].iloc[-1],
    }

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–∏–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
    if rsi_value > 70:
        rsi_emoji = "üìâ"  # –ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å
    elif rsi_value < 30:
        rsi_emoji = "üìà"  # –ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å
    else:
        rsi_emoji = "üîÑ"  # –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

    if mfi_value > 80:
        mfi_emoji = "üí∏"  # –ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å
    elif mfi_value < 20:
        mfi_emoji = "üíπ"  # –ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å
    else:
        mfi_emoji = "üí∏"  # –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

    if cci_value > 100:
        cci_emoji = "üìà"  # –°–∏–≥–Ω–∞–ª –∫ –ø–æ–∫—É–ø–∫–µ
    elif cci_value < -100:
        cci_emoji = "üìâ"  # –°–∏–≥–Ω–∞–ª –∫ –ø—Ä–æ–¥–∞–∂–µ
    else:
        cci_emoji = "üîÑ"  # –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

    indicators["Trend"] = "üìà üêÇ" if indicators["MACD"] > 0 and indicators["ADX"] > 25 else "üìâ üêª"

    return indicators, rsi_emoji, mfi_emoji, cci_emoji

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /ta
@dp.message(Command(commands=['ta']))
async def send_technical_analysis(message: Message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        language = get_user_language(message.from_user.id)
        is_russian = (language == 'ru')

        if len(message.text.split()) < 2:
            if is_russian:
                await message.reply("‚ùóÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å–∏–º–≤–æ–ª –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã.")
            else:
                await message.reply("‚ùóÔ∏è Please specify the cryptocurrency symbol.")
            return

        symbol = message.text.split(' ')[1].upper() + 'USDT'
        base_currency = symbol.replace('USDT', '')  # –ò–∑–≤–ª–µ–∫–∞–µ–º –±–∞–∑–æ–≤—É—é –≤–∞–ª—é—Ç—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTC, ETH)

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∏ —ç–º–æ–¥–∑–∏
        indicators, rsi_emoji, mfi_emoji, cci_emoji = await get_technical_indicators(symbol)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if is_russian:
            ta_message = (
                f"<b>{symbol}/USDT –Ω–∞ Binance [1h]</b>\n"
                f"üíµ <b>–¶–µ–Ω–∞:</b> {indicators['Price']:.2f} USDT\n"
                f"üìä <b>–û–±—ä–µ–º:</b> {indicators['Volume']:.2f} {base_currency}\n\n"
                f"üî• <b>–°—Ä–µ–¥–Ω—è—è –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å:</b> {indicators['AvgVolatility']:.2f}%\n"
                f"{rsi_emoji} <b>RSI(14):</b> {indicators['RSI']:.2f}\n"
                f"{mfi_emoji} <b>MFI(14):</b> {indicators['MFI']:.2f}\n"
                f"{cci_emoji} <b>CCI(14):</b> {indicators['CCI']:.2f}\n"
                f"‚ö†Ô∏è <b>BBands(20,2):</b> –ù–∏–∂–Ω—è—è: {indicators['BBands'][0]:.2f}, –°—Ä–µ–¥–Ω—è—è: {indicators['BBands'][1]:.2f}, –í–µ—Ä—Ö–Ω—è—è: {indicators['BBands'][2]:.2f}\n"
                f"üìà <b>SMA(50):</b> {indicators['SMA']:.2f}\n"
                f"üìâ <b>MACD:</b> {indicators['MACD']:.2f}\n"
                f"üìâ <b>ADX:</b> {indicators['ADX']:.2f}\n"
                f"<b>{indicators['Trend']} —Ä—ã–Ω–æ–∫</b>"
            )
        else:
            ta_message = (
                f"<b>{symbol}/USDT on Binance [1h]</b>\n"
                f"üíµ <b>Price:</b> {indicators['Price']:.2f} USDT\n"
                f"üìä <b>Volume:</b> {indicators['Volume']:.2f} {base_currency}\n\n"
                f"üî• <b>Avg Volatility:</b> {indicators['AvgVolatility']:.2f}%\n"
                f"{rsi_emoji} <b>RSI(14):</b> {indicators['RSI']:.2f}\n"
                f"{mfi_emoji} <b>MFI(14):</b> {indicators['MFI']:.2f}\n"
                f"{cci_emoji} <b>CCI(14):</b> {indicators['CCI']:.2f}\n"
                f"‚ö†Ô∏è <b>BBands(20,2):</b> Lower: {indicators['BBands'][0]:.2f}, Middle: {indicators['BBands'][1]:.2f}, Upper: {indicators['BBands'][2]:.2f}\n"
                f"üìà <b>SMA(50):</b> {indicators['SMA']:.2f}\n"
                f"üìâ <b>MACD:</b> {indicators['MACD']:.2f}\n"
                f"üìâ <b>ADX:</b> {indicators['ADX']:.2f}\n"
                f"<b>{indicators['Trend']} market</b>"
            )

        await message.answer(ta_message, parse_mode="HTML")  # –ò—Å–ø–æ–ª—å–∑—É–µ–º HTML –¥–ª—è —Ä–∞–∑–º–µ—Ç–∫–∏

    except Exception as e:
        if is_russian:
            await message.reply("‚ùóÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ —Ä–∞—Å—á–µ—Ç–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤.")
        else:
            await message.reply("‚ùóÔ∏è An error occurred while fetching data or calculating indicators.")
        print(f"–û—à–∏–±–∫–∞: {e}")
