import aiohttp
from aiogram import types
from aiogram.filters import Command
from aiogram.types import Message
from config import settings  # –ó–¥–µ—Å—å —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤–∞—à API-–∫–ª—é—á
from bot import dp  # –ò–º–ø–æ—Ä—Ç –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
import requests
from app.database.crud import get_user_language
import logging
from datetime import datetime


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–∏—Å–µ–ª —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –¥–æ 5 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
def format_number(number):
    return f"{number:.4f}"


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_text(language, key):
    texts = {
        'en': {
            'title': "ü§ñ Detailed statistics for the collection",
            'volume': "üí∞ Total sales volume:",
            'sales': "üõí Total sales:",
            'average_price': "üìä Average sale price:",
            'owners': "üë• Number of owners:",
            'market_cap': "üíé Market capitalization:",
            'floor_price': "üìâ Floor price:",
            'periods': "üìÖ Period data:",
            'volume_period': "üìà Sales volume:",
            'sales_period': "üõí Sales:",
            'volume_change': "‚öñÔ∏è Volume change:",
            'sales_change': "üí∏ Sales change:",
            'collection_not_found': "‚ùóÔ∏èCollection not found. Check the slug.",
            'api_error': "‚ùóÔ∏èError: Failed to retrieve data from the OpenSea API.",
            'client_error': "‚ùóÔ∏èAn error occurred while retrieving data."
        },
        'ru': {
            'title': "ü§ñ –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏",
            'volume': "üí∞ –û–±—â–∏–π –æ–±—ä–µ–º –ø—Ä–æ–¥–∞–∂:",
            'sales': "üõí –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–∂:",
            'average_price': "üìä –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏:",
            'owners': "üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤:",
            'market_cap': "üíé –†—ã–Ω–æ—á–Ω–∞—è –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è:",
            'floor_price': "üìâ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞:",
            'periods': "üìÖ –î–∞–Ω–Ω—ã–µ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º:",
            'volume_period': "üìà –û–±—ä–µ–º –ø—Ä–æ–¥–∞–∂:",
            'sales_period': "üõí –ü—Ä–æ–¥–∞–∂–∏:",
            'volume_change': "‚¨ÜÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ–±—ä–µ–º–∞:",
            'sales_change': "‚¨ÜÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂:",
            'collection_not_found': "‚ùóÔ∏è–ö–æ–ª–ª–µ–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ slug.",
            'api_error': "‚ùóÔ∏è–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç API OpenSea.",
            'client_error': "‚ùóÔ∏è–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö."
        }
    }
    return texts[language][key]


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–º–æ–¥–∑–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
def add_emoji_for_change(value):
    if value > 0:
        return f"üíö {format_number(value)}%"
    elif value < 0:
        return f"üíî {format_number(value)}%"
    else:
        return f"{format_number(value)}%"


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /nft
@dp.message(Command(commands=['nft']))
async def nft_info_handler(message: Message):
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    text = message.text.split(maxsplit=1)
    if len(text) < 2:
        await message.reply("Please specify the collection name after the /nft command.")
        return

    user_id = message.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    language = get_user_language(user_id)

    collection_slug = text[1].strip().lower()
    stats_url = f"https://api.opensea.io/api/v2/collections/{collection_slug}/stats"
    headers = {
        "X-API-KEY": settings.opensea_api_key
    }

    try:
        async with aiohttp.ClientSession() as session:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–ª–ª–µ–∫—Ü–∏–∏
            async with session.get(stats_url, headers=headers) as response:
                status_code = response.status
                response_text = await response.text()
                print(f"Status: {status_code}")
                print(f"Response: {response_text}")

                if status_code == 200:
                    data = await response.json()
                    total_stats = data.get('total', {})
                    intervals = data.get('intervals', [])

                    if total_stats:
                        response_text = (
                            f"{get_text(language, 'title')} {collection_slug}:\n\n"
                            f"{get_text(language, 'volume')} {format_number(total_stats.get('volume', 0))} ETH\n"
                            f"{get_text(language, 'sales')} {total_stats.get('sales', 0)}\n"
                            f"{get_text(language, 'average_price')} {format_number(total_stats.get('average_price', 0))} ETH\n"
                            f"{get_text(language, 'owners')} {total_stats.get('num_owners', 0)}\n"
                            f"{get_text(language, 'market_cap')} {format_number(total_stats.get('market_cap', 0))} ETH\n"
                            f"{get_text(language, 'floor_price')} {format_number(total_stats.get('floor_price', 0))} {total_stats.get('floor_price_symbol', 'ETH')}\n"
                        )
                    else:
                        response_text = get_text(language, 'collection_not_found')

                    if intervals:
                        response_text += f"\n{get_text(language, 'periods')}\n"
                        for interval in intervals:
                            interval_name = interval['interval'].replace('_', ' ').title()
                            volume_change = interval.get('volume_diff', 0) / interval['volume'] * 100 if interval[
                                'volume'] else 0
                            sales_change = interval.get('sales_diff', 0) / interval['sales'] * 100 if interval[
                                'sales'] else 0

                            response_text += (
                                f"üîπ <b>{interval_name}:</b>\n"
                                f"   {get_text(language, 'volume_period')} {format_number(interval['volume'])} ETH\n"
                                f"   {get_text(language, 'sales_period')} {interval['sales']}\n"
                                f"   {get_text(language, 'volume_change')} {add_emoji_for_change(volume_change)}\n"
                            )

                            if sales_change != 0:
                                response_text += f"   {get_text(language, 'sales_change')} {add_emoji_for_change(sales_change)}\n"

                            response_text += "\n"

                elif status_code == 404:
                    response_text = get_text(language, 'collection_not_found')
                else:
                    response_text = f"{get_text(language, 'api_error')} –°—Ç–∞—Ç—É—Å: {status_code}."

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.reply(response_text, parse_mode="HTML")

    except aiohttp.ClientError as e:
        await message.reply(get_text(language, 'client_error'))
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")

    except Exception as e:
        await message.reply(get_text(language, 'client_error'))
        print(f"–û—à–∏–±–∫–∞: {e}")


@dp.message(Command(commands=['nft_events']))
async def nft_events_handler(message: Message):
    # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    user_language = get_user_language(message.from_user.id)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —è–∑—ã–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã
    if user_language == 'ru':
        recent_events_text = "ü§ñ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –Ω–∞ OpenSea:</b>\n\n"
        link_text = "üîó <b>–°—Å—ã–ª–∫–∞:</b>"
        price_text = "üí∞ <b>–¶–µ–Ω–∞:</b>"
        event_type_text = "üîÑ <b>–¢–∏–ø —Å–æ–±—ã—Ç–∏—è:</b>"
        chain_text = "üåê <b>–°–µ—Ç—å:</b>"
        not_found_text = "‚ùóÔ∏è–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–µ–¥–∞–≤–Ω–∏—Ö —Å–æ–±—ã—Ç–∏–π –Ω–∞ OpenSea."
        error_text = "‚ùóÔ∏è–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç API OpenSea. –°—Ç–∞—Ç—É—Å: {}."
        client_error_text = "‚ùóÔ∏è–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö."
        unexpected_error_text = "‚ùóÔ∏è–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞."
        no_name_text = "üñºÔ∏è –ë–µ–∑ –∏–º–µ–Ω–∏"
    else:
        recent_events_text = "ü§ñ <b>Recent events on OpenSea:</b>\n\n"
        link_text = "üîó <b>Link:</b>"
        price_text = "üí∞ <b>Price:</b>"
        event_type_text = "üîÑ <b>Event Type:</b>"
        chain_text = "üåê <b>Chain:</b>"
        not_found_text = "‚ùóÔ∏èNo recent events found on OpenSea."
        error_text = "‚ùóÔ∏èError: Failed to fetch data from OpenSea API. Status: {}."
        client_error_text = "‚ùóÔ∏èThere was an error fetching the data."
        unexpected_error_text = "‚ùóÔ∏èAn unexpected error occurred."
        no_name_text = "üñºÔ∏è No Name"

    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–º–∞–Ω–¥—ã
    args = message.text.split()[1:]  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
    args = ' '.join(args).replace(',', ' ').split()  # –£–±–∏—Ä–∞–µ–º –∑–∞–ø—è—Ç—ã–µ –∏ –¥–µ–ª–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤

    # –†–∞–∑–±–∏—Ä–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    params = {
        "event_type": "sale",  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–æ–¥–∞–∂–∏
        "only_opensea": "false",
        "offset": "0",
        "limit": "20"  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç
    }

    for arg in args:
        if '=' in arg:
            key, value = arg.split('=', 1)
            params[key.strip()] = value.strip()

    url = "https://api.opensea.io/api/v2/events"
    headers = {
        "X-API-KEY": settings.opensea_api_key
    }

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, headers=headers, params=params) as response:
                status_code = response.status
                if status_code == 200:
                    data = await response.json()
                    events = data.get('asset_events', [])

                    if events:
                        response_text = recent_events_text
                        for event in events:
                            nft_data = event.get('nft', {})
                            asset_name = nft_data.get('name', no_name_text)
                            asset_url = nft_data.get('opensea_url', '#')
                            payment_data = event.get('payment', {})
                            total_price = float(payment_data.get('quantity', 0)) / (10 ** payment_data.get('decimals', 18))
                            payment_token = payment_data.get('symbol', 'ETH')
                            chain = event.get('chain', 'ethereum').capitalize()
                            event_type = event.get('event_type', 'Sale').capitalize()

                            response_text += (
                                f"üîπ <b>{asset_name}</b>\n"
                                f"{link_text} <a href='{asset_url}'>OpenSea</a>\n"
                                f"{price_text} {total_price:.5f} {payment_token}\n"
                                f"{event_type_text} {event_type}\n"
                                f"{chain_text} {chain}\n\n"
                            )
                    else:
                        response_text = not_found_text

                else:
                    response_text = error_text.format(status_code)

        await message.reply(response_text, parse_mode="HTML")

    except aiohttp.ClientError as e:
        await message.reply(client_error_text)
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")

    except Exception as e:
        await message.reply(unexpected_error_text)
        print(f"–û—à–∏–±–∫–∞: {e}")




@dp.message(Command(commands=['nft_events_collection']))
async def nft_events_collection_handler(message: Message):
    # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    user_language = get_user_language(message.from_user.id)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —è–∑—ã–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã
    if user_language == 'ru':
        recent_events_text = "ü§ñ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –Ω–∞ OpenSea:</b>\n\n"
        link_text = "üîó <b>–°—Å—ã–ª–∫–∞:</b>"
        price_text = "üí∞ <b>–¶–µ–Ω–∞:</b>"
        event_type_text = "üîÑ <b>–¢–∏–ø —Å–æ–±—ã—Ç–∏—è:</b>"
        chain_text = "üåê <b>–°–µ—Ç—å:</b>"
        not_found_text = "‚ùóÔ∏è–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–µ–¥–∞–≤–Ω–∏—Ö —Å–æ–±—ã—Ç–∏–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –Ω–∞ OpenSea."
        error_text = "‚ùóÔ∏è–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç API OpenSea. –°—Ç–∞—Ç—É—Å: {}."
        client_error_text = "‚ùóÔ∏è–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö."
        unexpected_error_text = "‚ùóÔ∏è–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞."
        no_name_text = "üñºÔ∏è –ë–µ–∑ –∏–º–µ–Ω–∏"
    else:
        recent_events_text = "ü§ñ <b>Recent collection events on OpenSea:</b>\n\n"
        link_text = "üîó <b>Link:</b>"
        price_text = "üí∞ <b>Price:</b>"
        event_type_text = "üîÑ <b>Event Type:</b>"
        chain_text = "üåê <b>Chain:</b>"
        not_found_text = "‚ùóÔ∏èNo recent collection events found on OpenSea."
        error_text = "‚ùóÔ∏èError: Failed to fetch data from OpenSea API. Status: {}."
        client_error_text = "‚ùóÔ∏èThere was an error fetching the data."
        unexpected_error_text = "‚ùóÔ∏èAn unexpected error occurred."
        no_name_text = "üñºÔ∏è No Name"

    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–º–∞–Ω–¥—ã
    args = message.text.split()[1:]  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
    if not args:
        await message.reply("‚ùóÔ∏è–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä collection_slug.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º slug –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ (collection_slug)
    collection_slug = args[0].lower().replace(' ', '-')

    # –†–∞–∑–±–∏—Ä–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
    params = {
        "event_type": "sale",  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–æ–¥–∞–∂–∏
        "limit": "20",  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç
    }

    for arg in args[1:]:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç (collection_slug)
        if '=' in arg:
            key, value = arg.split('=', 1)
            params[key.strip()] = value.strip()

    url = f"https://api.opensea.io/api/v2/events/collection/{collection_slug}"
    headers = {
        "X-API-KEY": settings.opensea_api_key
    }

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, headers=headers, params=params) as response:
                status_code = response.status
                if status_code == 200:
                    data = await response.json()
                    events = data.get('asset_events', [])

                    if events:
                        response_text = recent_events_text
                        for event in events:
                            nft_data = event.get('nft', {})
                            asset_name = nft_data.get('name', no_name_text)
                            asset_url = nft_data.get('opensea_url', '#')
                            payment_data = event.get('payment', {})
                            total_price = float(payment_data.get('quantity', 0)) / (10 ** payment_data.get('decimals', 18))
                            payment_token = payment_data.get('symbol', 'ETH')
                            chain = event.get('chain', 'ethereum').capitalize()
                            event_type = event.get('event_type', 'Sale').capitalize()

                            response_text += (
                                f"üîπ <b>{asset_name}</b>\n"
                                f"{link_text} <a href='{asset_url}'>OpenSea</a>\n"
                                f"{price_text} {total_price:.5f} {payment_token}\n"
                                f"{event_type_text} {event_type}\n"
                                f"{chain_text} {chain}\n\n"
                            )
                    else:
                        response_text = not_found_text

                else:
                    response_text = error_text.format(status_code)

        await message.reply(response_text, parse_mode="HTML")

    except aiohttp.ClientError as e:
        await message.reply(client_error_text)
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")

    except Exception as e:
        await message.reply(unexpected_error_text)
        print(f"–û—à–∏–±–∫–∞: {e}")


@dp.message(Command(commands=['nft_events_account']))
async def nft_events_account_handler(message: Message):
    # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    user_language = get_user_language(message.from_user.id)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —è–∑—ã–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã
    if user_language == 'ru':
        recent_events_text = "ü§ñ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–∞ OpenSea:</b>\n\n"
        link_text = "üîó <b>–°—Å—ã–ª–∫–∞:</b>"
        price_text = "üí∞ <b>–¶–µ–Ω–∞:</–±>"
        event_type_text = "üîÑ <b>–¢–∏–ø —Å–æ–±—ã—Ç–∏—è:</–±>"
        chain_text = "üåê <b>–°–µ—Ç—å:</–±>"
        not_found_text = "‚ùóÔ∏è–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–µ–¥–∞–≤–Ω–∏—Ö —Å–æ–±—ã—Ç–∏–π –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–∞ OpenSea."
        error_text = "‚ùóÔ∏è–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç API OpenSea. –°—Ç–∞—Ç—É—Å: {}."
        client_error_text = "‚ùóÔ∏è–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö."
        unexpected_error_text = "‚ùóÔ∏è–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞."
        no_name_text = "üñºÔ∏è –ë–µ–∑ –∏–º–µ–Ω–∏"
    else:
        recent_events_text = "ü§ñ <b>Recent account events on OpenSea:</b>\n\n"
        link_text = "üîó <b>Link:</b>"
        price_text = "üí∞ <b>Price:</b>"
        event_type_text = "üîÑ <b>Event Type:</b>"
        chain_text = "üåê <b>Chain:</b>"
        not_found_text = "‚ùóÔ∏èNo recent account events found on OpenSea."
        error_text = "‚ùóÔ∏èError: Failed to fetch data from OpenSea API. Status: {}."
        client_error_text = "‚ùóÔ∏èThere was an error fetching the data."
        unexpected_error_text = "‚ùóÔ∏èAn unexpected error occurred."
        no_name_text = "üñºÔ∏è No Name"

    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–º–∞–Ω–¥—ã
    args = message.text.split()[1:]  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
    if not args:
        await message.reply("‚ùóÔ∏è–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –ø—É–±–ª–∏—á–Ω—ã–π –∞–¥—Ä–µ—Å –±–ª–æ–∫—á–µ–π–Ω–∞.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
    account_address = args[0]

    # –†–∞–∑–±–∏—Ä–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
    params = {
        "event_type": "sale",  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–æ–¥–∞–∂–∏
        "limit": "20",  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç
    }

    for arg in args[1:]:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç (account_address)
        if '=' in arg:
            key, value = arg.split('=', 1)
            params[key.strip()] = value.strip()

    url = f"https://api.opensea.io/api/v2/events/accounts/{account_address}"
    headers = {
        "X-API-KEY": settings.opensea_api_key
    }

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, headers=headers, params=params) as response:
                status_code = response.status
                if status_code == 200:
                    data = await response.json()
                    events = data.get('asset_events', [])

                    if events:
                        response_text = recent_events_text
                        for event in events:
                            nft_data = event.get('nft', {})
                            asset_name = nft_data.get('name', no_name_text)
                            asset_url = nft_data.get('opensea_url', '#')
                            payment_data = event.get('payment', {})
                            total_price = float(payment_data.get('quantity', 0)) / (10 ** payment_data.get('decimals', 18))
                            payment_token = payment_data.get('symbol', 'ETH')
                            chain = event.get('chain', 'ethereum').capitalize()
                            event_type = event.get('event_type', 'Sale').capitalize()

                            response_text += (
                                f"üîπ <b>{asset_name}</b>\n"
                                f"{link_text} <a href='{asset_url}'>OpenSea</a>\n"
                                f"{price_text} {total_price:.5f} {payment_token}\n"
                                f"{event_type_text} {event_type}\n"
                                f"{chain_text} {chain}\n\n"
                            )
                    else:
                        response_text = not_found_text

                else:
                    response_text = error_text.format(status_code)

        await message.reply(response_text, parse_mode="HTML")

    except aiohttp.ClientError as e:
        await message.reply(client_error_text)
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")

    except Exception as e:
        await message.reply(unexpected_error_text)
        print(f"–û—à–∏–±–∫–∞: {e}")


@dp.message(Command(commands=['nft_get_account']))
async def nft_getaccount_handler(message: Message):
    # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    user_language = get_user_language(message.from_user.id)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —è–∑—ã–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã
    if user_language == 'ru':
        account_profile_text = "ü§ñ <b>–ü—Ä–æ—Ñ–∏–ª—å –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–∞ OpenSea:</b>\n\n"
        username_text = "üßë‚Äçüíª <b>–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>"
        bio_text = "üìÑ <b>–ë–∏–æ–≥—Ä–∞—Ñ–∏—è:</b>"
        website_text = "üåê <b>–°–∞–π—Ç:</b>"
        joined_date_text = "üìÖ <b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b>"
        social_media_text = "üîó <b>–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏:</b>"
        no_link_text = "–Ω–µ—Ç —Å—Å—ã–ª–∫–∏"
    else:
        account_profile_text = "ü§ñ <b>Account profile on OpenSea:</b>\n\n"
        username_text = "üßë‚Äçüíª <b>Username:</b>"
        bio_text = "üìÑ <b>Bio:</b>"
        website_text = "üåê <b>Website:</b>"
        joined_date_text = "üìÖ <b>Joined Date:</b>"
        social_media_text = "üîó <b>Social Media:</b>"
        no_link_text = "no link"

    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–º–∞–Ω–¥—ã
    args = message.text.split()[1:]  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
    if not args:
        await message.reply("‚ùóÔ∏è–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –ø—É–±–ª–∏—á–Ω—ã–π –∞–¥—Ä–µ—Å –±–ª–æ–∫—á–µ–π–Ω–∞ –∏–ª–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å –∏–ª–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    account_identifier = args[0]

    url = f"https://api.opensea.io/api/v2/accounts/{account_identifier}"
    headers = {
        "X-API-KEY": settings.opensea_api_key
    }

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, headers=headers) as response:
                status_code = response.status
                if status_code == 200:
                    data = await response.json()

                    # –°–±–æ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞
                    response_text = account_profile_text
                    response_text += f"{username_text} {data.get('username', 'No Username')}\n"
                    response_text += f"{bio_text} {data.get('bio', 'No Bio')}\n"

                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–∞–π—Ç
                    website = data.get('website', None)
                    if website:
                        response_text += f"{website_text} <a href='{website}'>{website}</a>\n"
                    else:
                        response_text += f"{website_text} {no_link_text}\n"

                    response_text += f"{joined_date_text} {data.get('joined_date', 'No Date')}\n"

                    if 'social_media_accounts' in data:
                        social_media_accounts = data['social_media_accounts']
                        if social_media_accounts:
                            response_text += f"{social_media_text}\n"
                            for account in social_media_accounts:
                                response_text += f"{account['platform']}: {account['username']}\n"

                    # –ï—Å–ª–∏ –Ω–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–∞–π—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –∫–æ–Ω–µ—Ü —Å–æ–æ–±—â–µ–Ω–∏—è
                    profile_image_url = data.get('profile_image_url', None)
                    if not website and profile_image_url:
                        await message.reply_photo(photo=profile_image_url, caption=response_text, parse_mode="HTML")
                        return

                else:
                    response_text = f"‚ùóÔ∏è–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç API OpenSea. –°—Ç–∞—Ç—É—Å: {status_code}."

        await message.reply(response_text, parse_mode="HTML")

    except aiohttp.ClientError as e:
        await message.reply("‚ùóÔ∏è–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")

    except Exception as e:
        await message.reply("‚ùóÔ∏è–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.")
        print(f"–û—à–∏–±–∫–∞: {e}")

@dp.message(Command(commands=['nft_get_contract']))
async def nft_get_contract_handler(message: Message):
    # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    user_language = get_user_language(message.from_user.id)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —è–∑—ã–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã
    if user_language == 'ru':
        contract_info_text = "ü§ñ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ –Ω–∞ OpenSea:</b>\n\n"
        address_text = "üè¶ <b>–ê–¥—Ä–µ—Å:</b>"
        chain_text = "‚õìÔ∏è <b>–¶–µ–ø–æ—á–∫–∞:</b>"
        collection_text = "üñºÔ∏è <b>–ö–æ–ª–ª–µ–∫—Ü–∏—è:</b>"
        contract_standard_text = "üìú <b>–°—Ç–∞–Ω–¥–∞—Ä—Ç –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞:</b>"
        name_text = "üìõ <b>–ò–º—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞:</b>"
        total_supply_text = "üî¢ <b>–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b>"
        error_text = "‚ùóÔ∏è–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç API OpenSea. –°—Ç–∞—Ç—É—Å: {}."
        not_found_text = "‚ùóÔ∏è–°–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞ –Ω–∞ —Ü–µ–ø–æ—á–∫–µ {}."
        client_error_text = "‚ùóÔ∏è–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö."
        unexpected_error_text = "‚ùóÔ∏è–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞."
    else:
        contract_info_text = "ü§ñ <b>Contract Information on OpenSea:</b>\n\n"
        address_text = "üè¶ <b>Address:</b>"
        chain_text = "‚õìÔ∏è <b>Chain:</b>"
        collection_text = "üñºÔ∏è <b>Collection:</b>"
        contract_standard_text = "üìú <b>Contract Standard:</b>"
        name_text = "üìõ <b>Contract Name:</b>"
        total_supply_text = "üî¢ <b>Total Supply:</b>"
        error_text = "‚ùóÔ∏èError: Failed to fetch data from OpenSea API. Status: {}."
        not_found_text = "‚ùóÔ∏èSmart contract not found for the provided address on the {} chain."
        client_error_text = "‚ùóÔ∏èThere was an error fetching the data."
        unexpected_error_text = "‚ùóÔ∏èAn unexpected error occurred."

    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–º–∞–Ω–¥—ã
    args = message.text.split()[1:]  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
    if len(args) < 2:
        await message.reply("‚ùóÔ∏è–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ü–µ–ø–æ—á–∫—É –∏ –ø—É–±–ª–∏—á–Ω—ã–π –∞–¥—Ä–µ—Å –±–ª–æ–∫—á–µ–π–Ω–∞.")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ø–æ—á–∫—É –∏ –∞–¥—Ä–µ—Å
    chain = args[0].lower()
    address = args[1]

    # –§–æ—Ä–º–∏—Ä—É–µ–º URL –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    url = f"https://api.opensea.io/api/v2/chain/{chain}/contract/{address}"
    headers = {
        "X-API-KEY": settings.opensea_api_key
    }

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, headers=headers) as response:
                status_code = response.status

                if status_code == 200:
                    data = await response.json()

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç
                    if 'address' in data and data['address']:
                        # –°–±–æ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞
                        response_text = contract_info_text
                        response_text += f"{address_text} {data.get('address', 'No Address')}\n"
                        response_text += f"{chain_text} {data.get('chain', 'No Chain')}\n"
                        response_text += f"{collection_text} {data.get('collection', 'No Collection')}\n"
                        response_text += f"{contract_standard_text} {data.get('contract_standard', 'No Standard')}\n"
                        response_text += f"{name_text} {data.get('name', 'No Name')}\n"
                        response_text += f"{total_supply_text} {data.get('total_supply', 'No Supply')}\n"
                    else:
                        # –ï—Å–ª–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                        response_text = not_found_text.format(chain)
                else:
                    response_text = error_text.format(status_code)

        await message.reply(response_text, parse_mode="HTML")

    except aiohttp.ClientError as e:
        await message.reply(client_error_text)

    except Exception as e:
        await message.reply(unexpected_error_text)


# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


@dp.message(Command(commands=['nft_get_nft']))
async def nft_get_nft_handler(message: Message):
    # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    user_language = get_user_language(message.from_user.id)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —è–∑—ã–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã
    if user_language == 'ru':
        nft_info_text = "ü§ñ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ NFT:</b>\n\n"
        identifier_text = "üÜî <b>–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä:</b>"
        collection_text = "üñºÔ∏è <b>–ö–æ–ª–ª–µ–∫—Ü–∏—è:</b>"
        contract_text = "üè¶ <b>–ö–æ–Ω—Ç—Ä–∞–∫—Ç:</b>"
        name_text = "üìõ <b>–ò–º—è:</b>"
        description_text = "üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>"
        image_url_text = "üñºÔ∏è <b>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:</b>"
        metadata_url_text = "üîó <b>URL –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö:</b>"
        opensea_url_text = "üåê <b>OpenSea URL:</b>"
        rarity_text = "‚≠êÔ∏è <b>–†–µ–¥–∫–æ—Å—Ç—å:</b>"
        owners_text = "üë• <b>–í–ª–∞–¥–µ–ª—å—Ü—ã:</b>"
        traits_text = "üîç <b>–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:</–±>"
        error_text = "‚ùóÔ∏è–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç API OpenSea. –°—Ç–∞—Ç—É—Å: {}."
        not_found_text = "‚ùóÔ∏èNFT –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –Ω–∞ —Ü–µ–ø–æ—á–∫–µ {}."
        client_error_text = "‚ùóÔ∏è–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö."
        unexpected_error_text = "‚ùóÔ∏è–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞."
    else:
        nft_info_text = "ü§ñ <b>NFT Information:</b>\n\n"
        identifier_text = "üÜî <b>Identifier:</b>"
        collection_text = "üñºÔ∏è <b>Collection:</b>"
        contract_text = "üè¶ <b>Contract:</b>"
        name_text = "üìõ <b>Name:</b>"
        description_text = "üìù <b>Description:</b>"
        image_url_text = "üñºÔ∏è <b>Image URL:</b>"
        metadata_url_text = "üîó <b>Metadata URL:</b>"
        opensea_url_text = "üåê <b>OpenSea URL:</b>"
        rarity_text = "‚≠êÔ∏è <b>Rarity:</b>"
        owners_text = "üë• <b>Owners:</b>"
        traits_text = "üîç <b>Traits:</b>"
        error_text = "‚ùóÔ∏èError: Failed to fetch data from OpenSea API. Status: {}."
        not_found_text = "‚ùóÔ∏èNFT not found for the provided identifier on the {} chain."
        client_error_text = "‚ùóÔ∏èThere was an error fetching the data."
        unexpected_error_text = "‚ùóÔ∏èAn unexpected error occurred."

    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–º–∞–Ω–¥—ã
    args = message.text.split()[1:]  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
    if len(args) < 3:
        await message.reply("‚ùóÔ∏è–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ü–µ–ø–æ—á–∫—É, –∞–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä NFT.")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ø–æ—á–∫—É, –∞–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä NFT
    chain = args[0].lower()
    address = args[1]
    identifier = args[2]

    # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
    url = f"https://api.opensea.io/api/v2/chain/{chain}/contract/{address}/nfts/{identifier}"
    headers = {
        "X-API-KEY": settings.opensea_api_key
    }

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, headers=headers) as response:
                status_code = response.status
                logger.info(f"Response status code: {status_code}")  # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞

                if status_code == 200:
                    data = await response.json()
                    logger.info(f"Received data: {data}")  # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ

                    if not data:
                        logger.error("Received empty response from API")
                        await message.reply(not_found_text.format(chain))
                        return

                    nft = data.get('nft')
                    logger.info(f"NFT data extracted: {nft}")  # –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ NFT

                    if nft is None:
                        logger.error(f"'nft' key is missing or None in response: {data}")
                        await message.reply(not_found_text.format(chain))
                        return

                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–¥–∫–æ—Å—Ç–∏ (rarity)
                    rarity = nft.get('rarity', {})
                    rank = rarity.get('rank', 'No Rank') if rarity else 'No Rank'
                    score = rarity.get('score', 'No Score') if rarity else 'No Score'

                    # –°–±–æ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞
                    response_text = nft_info_text
                    response_text += f"{identifier_text} {nft.get('identifier', 'No Identifier')}\n"
                    response_text += f"{collection_text} {nft.get('collection', 'No Collection')}\n"
                    response_text += f"{contract_text} {nft.get('contract', 'No Contract')}\n"
                    response_text += f"{name_text} {nft.get('name', 'No Name')}\n"
                    response_text += f"{description_text} {nft.get('description', 'No Description')}\n"
                    response_text += f"{image_url_text} {nft.get('image_url', 'No Image')}\n"
                    response_text += f"{metadata_url_text} {nft.get('metadata_url', 'No Metadata URL')}\n"
                    response_text += f"{opensea_url_text} {nft.get('opensea_url', 'No OpenSea URL')}\n"
                    response_text += f"{rarity_text} Rank: {rank} Score: {score}\n"

                    # –í–ª–∞–¥–µ–ª—å—Ü—ã
                    owners_info = "\n".join(
                        [f"  - {owner.get('address', 'No Address')} (Quantity: {owner.get('quantity', 'No Quantity')})"
                         for owner in nft.get('owners', [])])
                    response_text += f"{owners_text}\n{owners_info}\n"

                    # –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
                    traits_info = "\n".join(
                        [f"  - {trait.get('trait_type', 'No Type')}: {trait.get('value', 'No Value')}" for trait in
                         nft.get('traits', [])])
                    response_text += f"{traits_text}\n{traits_info}\n"

                else:
                    response_text = error_text.format(status_code)

        await message.reply(response_text, parse_mode="HTML")

    except aiohttp.ClientError as e:
        await message.reply(client_error_text)
        logger.error(f"ClientError: {e}")  # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ aiohttp

    except Exception as e:
        await message.reply(unexpected_error_text)
        logger.error(f"Exception: {e}")  # –õ–æ–≥–∏—Ä—É–µ–º –ª—é–±–æ–µ –¥—Ä—É–≥–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ


# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—à–∏–±–æ–∫
logger = logging.getLogger(__name__)
logger.setLevel(logging.ERROR)

@dp.message(Command(commands=['nft_listings_collection']))
async def nft_listings_collection_handler(message: Message):
    # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    user_language = get_user_language(message.from_user.id)

    # –Ø–∑—ã–∫–æ–≤–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è
    if user_language == 'ru':
        listings_info_text = "ü§ñ <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –ª–∏—Å—Ç–∏–Ω–≥–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏:</b>\n\n"
        error_text = "‚ùóÔ∏è–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç API OpenSea. –°—Ç–∞—Ç—É—Å: {}."
        client_error_text = "‚ùóÔ∏è–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö."
        unexpected_error_text = "‚ùóÔ∏è–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞."
        no_listings_text = "‚ùóÔ∏è–í –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–∏—Å—Ç–∏–Ω–≥–æ–≤."
        listing_text = "üìú <b>–õ–∏—Å—Ç–∏–Ω–≥:</b>\n"
        price_text = "üí∞ <b>–¶–µ–Ω–∞:</b>"
        seller_text = "üë§ <b>–ü—Ä–æ–¥–∞–≤–µ—Ü:</b>"
        start_time_text = "üïí <b>–ù–∞—á–∞–ª–æ:</b>"
        end_time_text = "‚åõÔ∏è <b>–û–∫–æ–Ω—á–∞–Ω–∏–µ:</b>"
        link_text = "üîó <b>–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–±—ä–µ–∫—Ç:</b>"
    else:
        listings_info_text = "ü§ñ <b>Active Collection Listings:</b>\n\n"
        error_text = "‚ùóÔ∏èError: Failed to fetch data from OpenSea API. Status: {}."
        client_error_text = "‚ùóÔ∏èThere was an error fetching the data."
        unexpected_error_text = "‚ùóÔ∏èAn unexpected error occurred."
        no_listings_text = "‚ùóÔ∏èNo active listings found in the collection."
        listing_text = "üìú <b>Listing:</b>\n"
        price_text = "üí∞ <b>Price:</b>"
        seller_text = "üë§ <b>Seller:</b>"
        start_time_text = "üïí <b>Start Time:</b>"
        end_time_text = "‚åõÔ∏è <b>End Time:</b>"
        link_text = "üîó <b>Link to Item:</b>"

    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–º–∞–Ω–¥—ã
    args = message.text.split()[1:]  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
    if len(args) < 1:
        await message.reply(error_text.format("Missing collection slug"))
        return

    # –ü–æ–ª—É—á–∞–µ–º slug –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∏ –ª–∏–º–∏—Ç
    collection_slug = args[0]
    limit = int(args[1]) if len(args) > 1 else 15

    # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
    url = f"https://api.opensea.io/api/v2/listings/collection/{collection_slug}/all?limit={limit}"
    headers = {
        "X-API-KEY": settings.opensea_api_key
    }

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, headers=headers) as response:
                status_code = response.status

                if status_code == 200:
                    data = await response.json()

                    if not data or 'listings' not in data or len(data['listings']) == 0:
                        await message.reply(no_listings_text)
                        return

                    listings = data['listings']
                    response_text = listings_info_text

                    for listing in listings:
                        price_info = listing.get('price', {}).get('current', {})
                        protocol_data = listing.get('protocol_data', {}).get('parameters', {})
                        offer = protocol_data.get('offer', [])[0] if protocol_data.get('offer') else {}
                        offerer = protocol_data.get('offerer', 'Unknown')
                        currency = price_info.get('currency', 'Unknown')
                        value_in_wei = int(price_info.get('value', '0'))
                        value_in_eth = value_in_wei / 10**18  # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏–∑ Wei –≤ ETH

                        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ Unix –≤ –æ–±—ã—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                        start_time = int(protocol_data.get('startTime', '0'))
                        end_time = int(protocol_data.get('endTime', '0'))
                        start_time_formatted = datetime.fromtimestamp(start_time).strftime('%d/%m/%Y %H:%M:%S')
                        end_time_formatted = datetime.fromtimestamp(end_time).strftime('%d/%m/%Y %H:%M:%S')

                        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–±—ä–µ–∫—Ç
                        contract_address = offer.get('token', 'Unknown')
                        token_id = offer.get('identifierOrCriteria', 'Unknown')
                        link = f"https://opensea.io/assets/ethereum/{contract_address}/{token_id}"

                        response_text += (
                            f"{listing_text}\n"
                            f"{price_text} {value_in_eth:.6f} {currency}\n"  # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ü–µ–Ω—É –≤ ETH
                            f"{seller_text} {offerer}\n"
                            f"{start_time_text} {start_time_formatted}\n"  # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
                            f"{end_time_text} {end_time_formatted}\n"  # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è
                            f"{link_text} <a href='{link}'>OpenSea</a>\n"
                            f"---\n"
                        )

                    await message.reply(response_text, parse_mode="HTML")

                else:
                    response_text = error_text.format(status_code)
                    await message.reply(response_text, parse_mode="HTML")

    except aiohttp.ClientError as e:
        await message.reply(client_error_text)
        logger.error(f"ClientError: {e}")  # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ aiohttp

    except Exception as e:
        await message.reply(unexpected_error_text)
        logger.error(f"Exception: {e}")  # –õ–æ–≥–∏—Ä—É–µ–º –ª—é–±–æ–µ –¥—Ä—É–≥–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ



# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—à–∏–±–æ–∫
logger = logging.getLogger(__name__)
logger.setLevel(logging.ERROR)

@dp.message(Command(commands=['nft_offers_collection']))
async def nft_offers_collection_handler(message: Message):
    # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    user_language = get_user_language(message.from_user.id)

    # –Ø–∑—ã–∫–æ–≤–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è
    if user_language == 'ru':
        offers_info_text = "ü§ñ <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏:</b>\n\n"
        error_text = "‚ùóÔ∏è–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç API OpenSea. –°—Ç–∞—Ç—É—Å: {}."
        client_error_text = "‚ùóÔ∏è–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö."
        unexpected_error_text = "‚ùóÔ∏è–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞."
        no_offers_text = "‚ùóÔ∏è–í –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π."
        offer_text = "üìú <b>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:</b>\n"
        price_text = "üí∞ <b>–¶–µ–Ω–∞:</b>"
        offerer_text = "üë§ <b>–ü—Ä–µ–¥–ª–æ–∂–∏–ª:</b>"
        criteria_text = "üìë <b>–ö—Ä–∏—Ç–µ—Ä–∏–∏:</b>"
        start_time_text = "üïí <b>–ù–∞—á–∞–ª–æ:</b>"
        end_time_text = "‚åõÔ∏è <b>–û–∫–æ–Ω—á–∞–Ω–∏–µ:</b>"
        link_text = "üîó <b>–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–±—ä–µ–∫—Ç:</b>"
    else:
        offers_info_text = "ü§ñ <b>Active Collection Offers:</b>\n\n"
        error_text = "‚ùóÔ∏èError: Failed to fetch data from OpenSea API. Status: {}."
        client_error_text = "‚ùóÔ∏èThere was an error fetching the data."
        unexpected_error_text = "‚ùóÔ∏èAn unexpected error occurred."
        no_offers_text = "‚ùóÔ∏èNo active offers found in the collection."
        offer_text = "üìú <b>Offer:</b>\n"
        price_text = "üí∞ <b>Price:</b>"
        offerer_text = "üë§ <b>Offerer:</b>"
        criteria_text = "üìë <b>Criteria:</b>"
        start_time_text = "üïí <b>Start Time:</b>"
        end_time_text = "‚åõÔ∏è <b>End Time:</b>"
        link_text = "üîó <b>Link to Item:</b>"

    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–º–∞–Ω–¥—ã
    args = message.text.split()[1:]  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
    if len(args) < 1:
        await message.reply(error_text.format("Missing collection slug"))
        return

    # –ü–æ–ª—É—á–∞–µ–º slug –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∏ –ª–∏–º–∏—Ç
    collection_slug = args[0]
    limit = int(args[1]) if len(args) > 1 else 15

    # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
    url = f"https://api.opensea.io/api/v2/offers/collection/{collection_slug}/all?limit={limit}"
    headers = {
        "X-API-KEY": settings.opensea_api_key
    }

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, headers=headers) as response:
                status_code = response.status

                if status_code == 200:
                    data = await response.json()
                    logger.error(f"Received data: {data}")  # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API

                    if not data or 'offers' not in data or len(data['offers']) == 0:
                        await message.reply(no_offers_text)
                        return

                    offers = data.get('offers', [])
                    response_text = offers_info_text

                    for offer in offers:
                        price_info = offer.get('price', {})
                        protocol_data = offer.get('protocol_data', {}).get('parameters', {})
                        criteria = offer.get('criteria', {})
                        offerer = protocol_data.get('offerer', 'Unknown') if protocol_data else 'Unknown'
                        currency = price_info.get('currency', 'Unknown') if price_info else 'Unknown'
                        value_in_wei = int(price_info.get('value', '0')) if price_info else 0
                        value_in_eth = value_in_wei / 10**18  # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏–∑ Wei –≤ ETH

                        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ Unix –≤ –æ–±—ã—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                        start_time = int(protocol_data.get('startTime', '0')) if protocol_data else 0
                        end_time = int(protocol_data.get('endTime', '0')) if protocol_data else 0
                        start_time_formatted = datetime.fromtimestamp(start_time).strftime('%d/%m/%Y %H:%M:%S') if start_time else 'Unknown'
                        end_time_formatted = datetime.fromtimestamp(end_time).strftime('%d/%m/%Y %H:%M:%S') if end_time else 'Unknown'

                        # –í—ã–≤–æ–¥–∏–º –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö –æ –∫—Ä–∏—Ç–µ—Ä–∏—è—Ö
                        contract_address = criteria.get('contract', {}).get('address', 'Unknown') if criteria else 'Unknown'
                        token_id = criteria.get('encoded_token_ids', 'Unknown') if criteria else 'Unknown'
                        trait_type = criteria.get('trait', {}).get('type', 'N/A')
                        trait_value = criteria.get('trait', {}).get('value', 'N/A')
                        link = f"https://opensea.io/assets/ethereum/{contract_address}/{token_id}" if contract_address != 'Unknown' and token_id != 'Unknown' else "N/A"

                        response_text += (
                            f"{offer_text}\n"
                            f"{price_text} {value_in_eth:.6f} {currency}\n"  # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ü–µ–Ω—É –≤ ETH
                            f"{offerer_text} {offerer}\n"
                            f"{criteria_text} Contract: {contract_address}, Token ID: {token_id}, Trait: {trait_type} - {trait_value}\n"
                            f"{start_time_text} {start_time_formatted}\n"  # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
                            f"{end_time_text} {end_time_formatted}\n"  # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è
                            f"{link_text} <a href='{link}'>OpenSea</a>\n" if link != "N/A" else f"{link_text} N/A\n"
                            f"---\n"
                        )

                    await message.reply(response_text, parse_mode="HTML")

                else:
                    response_text = error_text.format(status_code)
                    await message.reply(response_text, parse_mode="HTML")

    except aiohttp.ClientError as e:
        await message.reply(client_error_text)
        logger.error(f"ClientError: {e}")  # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ aiohttp

    except Exception as e:
        await message.reply(unexpected_error_text)
        logger.error(f"Exception: {e}")  # –õ–æ–≥–∏—Ä—É–µ–º –ª—é–±–æ–µ –¥—Ä—É–≥–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ

