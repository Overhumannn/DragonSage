from binance import Client
import logging
from datetime import datetime
from aiogram import types
from aiogram.filters import Command
from aiogram.types import Message
from app.database.crud import get_user_language
from bot import dp
from config import settings

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Binance
binance_client = Client(api_key=settings.binance_api_key, api_secret=settings.binance_api_secret)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å Binance
def fetch_binance_ath(symbol, start_date='1 Jan, 2010'):
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å Binance –¥–ª—è {symbol} –Ω–∞—á–∏–Ω–∞—è —Å {start_date}")

    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –≤–∏–¥–µ —Å–≤–µ—á–µ–π (kline)
        klines = binance_client.get_historical_klines(f"{symbol}USDT", Client.KLINE_INTERVAL_1DAY, start_date)
        return klines
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö —Å Binance –¥–ª—è {symbol}: {e}")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
def fetch_binance_current_price(symbol):
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã –¥–ª—è {symbol}")

    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã —á–µ—Ä–µ–∑ Binance API
        ticker = binance_client.get_symbol_ticker(symbol=f"{symbol}USDT")
        return float(ticker['price'])
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã –¥–ª—è {symbol}: {e}")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–∞–∏–≤—ã—Å—à–µ–π —Ü–µ–Ω—ã (ATH) –≤ –¥–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π
def find_all_time_high_binance(data):
    if not data:
        return None

    # –°–≤–µ—á–∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ: [timestamp, open, high, low, close, ...]
    ath = max(data, key=lambda x: float(x[2]))  # x[2] - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ (high) –≤ —Å–≤–µ—á–∫–µ
    return float(ath[2]), int(ath[0])  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞–∏–≤—ã—Å—à—É—é —Ü–µ–Ω—É –∏ timestamp

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ UNIX –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–¥.–º–º.–≥–≥–≥–≥
def format_unix_timestamp(timestamp):
    date = datetime.utcfromtimestamp(timestamp / 1000)  # Binance –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Ä–µ–º—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
    return date.strftime('%d.%m.%Y')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /ath
@dp.message(Command(commands=['ath']))
async def send_all_time_high(message: Message):
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–∏–º–≤–æ–ª –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        parts = message.text.split()
        if len(parts) != 2:
            await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å–∏–º–≤–æ–ª –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã. –ù–∞–ø—Ä–∏–º–µ—Ä: /ath btc")
            return

        symbol = parts[1].upper()
        logging.info(f"–ü–æ–ª—É—á–µ–Ω–∏–µ ATH –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã {symbol}")

        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —Å Binance –¥–ª—è –ø–æ–∏—Å–∫–∞ ATH
        crypto_data = fetch_binance_ath(symbol)

        if crypto_data:
            # –ù–∞—Ö–æ–¥–∏–º –Ω–∞–∏–≤—ã—Å—à—É—é —Ü–µ–Ω—É –∑–∞ –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é (ATH)
            ath_price, ath_time = find_all_time_high_binance(crypto_data)
            if ath_price:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç –¥–¥.–º–º.–≥–≥–≥–≥
                formatted_date = format_unix_timestamp(ath_time)

                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
                current_price = fetch_binance_current_price(symbol)

                if current_price is not None:
                    # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É ATH –∏ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω–æ–π
                    difference = ath_price - current_price
                    percentage_diff = (difference / ath_price) * 100

                    # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    user_language = get_user_language(message.from_user.id)

                    # –ê–¥–∞–ø—Ç–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    if user_language == "ru":
                        response_text = (
                            f"üìà <b>All Time High (ATH) –¥–ª—è {symbol}:</b>\n\n"
                            f"üí∞ <b>–¶–µ–Ω–∞ ATH:</b> ${ath_price}\n"
                            f"üìÖ <b>–î–∞—Ç–∞:</b> {formatted_date}\n"
                            f"üè∑Ô∏è <b>–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞:</b> ${current_price}\n"
                            f"üìâ <b>–†–∞–∑–Ω–∏—Ü–∞:</b> ${difference:.2f} ({percentage_diff:.2f}%)"
                        )
                    else:
                        response_text = (
                            f"üìà <b>All Time High (ATH) for {symbol}:</b>\n\n"
                            f"üí∞ <b>ATH Price:</b> ${ath_price}\n"
                            f"üìÖ <b>Date:</b> {formatted_date}\n"
                            f"üè∑Ô∏è <b>Current Price:</b> ${current_price}\n"
                            f"üìâ <b>Difference:</b> ${difference:.2f} ({percentage_diff:.2f}%)"
                        )
                else:
                    response_text = f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –¥–ª—è {symbol}."
            else:
                response_text = f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ ATH –¥–ª—è {symbol}."
        else:
            response_text = f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol}."

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.reply(response_text, parse_mode="HTML")
    except Exception as e:
        logging.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /ath: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã.")
