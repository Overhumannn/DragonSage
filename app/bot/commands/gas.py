import aiohttp  # –î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤
from aiogram import types  # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–∏–ø–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö Telegram
from aiogram.filters import Command  # –î–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥
from aiogram.types import Message  # –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π Telegram
from bot import dp  # –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
from app.database.crud import get_user_language  # –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
from config import settings


@dp.message(Command(commands=['gas']))
async def get_gas_fees(message: Message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        user_id = message.from_user.id
        language = get_user_language(user_id)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥
        is_russian = language == 'ru'

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º API-–∫–ª—é—á –æ—Ç Etherscan –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –≥–∞–∑–æ–≤—ã—Ö —Å–±–æ—Ä–∞—Ö
        eth_url = f"https://api.etherscan.io/api?module=gastracker&action=gasoracle&apikey={settings.etherscan_api_key}"

        async with aiohttp.ClientSession() as session:
            async with session.get(eth_url) as response:
                if response.status == 200:
                    eth_data = await response.json()
                    if eth_data.get('status') == "1":
                        gas_data = eth_data['result']

                        gas_message = (
                            "‚õΩÔ∏è **Ethereum Gas Fees**:\n" if not is_russian else "‚õΩÔ∏è **–ì–∞–∑–æ–≤—ã–µ —Å–±–æ—Ä—ã Ethereum**:\n"
                        )
                        gas_message += (
                            f"üîπ **Low**: {gas_data.get('SafeGasPrice', 'N/A')} Gwei\n" if not is_russian
                            else f"üîπ **–ù–∏–∑–∫–∏–µ**: {gas_data.get('SafeGasPrice', 'N/A')} Gwei\n"
                        )
                        gas_message += (
                            f"üî∏ **Average**: {gas_data.get('ProposeGasPrice', 'N/A')} Gwei\n" if not is_russian
                            else f"üî∏ **–°—Ä–µ–¥–Ω–∏–µ**: {gas_data.get('ProposeGasPrice', 'N/A')} Gwei\n"
                        )
                        gas_message += (
                            f"üî∫ **High**: {gas_data.get('FastGasPrice', 'N/A')} Gwei\n" if not is_russian
                            else f"üî∫ **–í—ã—Å–æ–∫–∏–µ**: {gas_data.get('FastGasPrice', 'N/A')} Gwei\n"
                        )

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–≤–µ—Ç–µ API
                        if 'suggestBaseFee' in gas_data:
                            gas_message += (
                                f"\n‚è≥ **Estimated Base Fee**: {gas_data['suggestBaseFee']} Gwei\n" if not is_russian
                                else f"\n‚è≥ **–û—Ü–µ–Ω–æ—á–Ω–∞—è –±–∞–∑–æ–≤–∞—è –∫–æ–º–∏—Å—Å–∏—è**: {gas_data['suggestBaseFee']} Gwei\n"
                            )
                        if 'blockTime' in gas_data:
                            gas_message += (
                                f"‚õè **Block Time**: {gas_data['blockTime']} seconds\n" if not is_russian
                                else f"‚õè **–í—Ä–µ–º—è –±–ª–æ–∫–∞**: {gas_data['blockTime']} —Å–µ–∫—É–Ω–¥\n"
                            )
                        if 'lastBlock' in gas_data:
                            gas_message += (
                                f"üìä **Last Block**: {gas_data['lastBlock']}\n" if not is_russian
                                else f"üìä **–ü–æ—Å–ª–µ–¥–Ω–∏–π –±–ª–æ–∫**: {gas_data['lastBlock']}\n"
                            )
                    else:
                        gas_message = (
                            "‚ùå Failed to retrieve data from Etherscan." if not is_russian
                            else "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç Etherscan."
                        )
                else:
                    gas_message = (
                        "‚ùå Error: Unable to fetch data." if not is_russian
                        else "‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ."
                    )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.reply(gas_message, parse_mode="Markdown")

    except Exception as e:
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –Ω—É–∂–Ω–æ–º —è–∑—ã–∫–µ
        error_message = (
            "‚ö†Ô∏è An error occurred while fetching gas fees data. Please try again later." if not is_russian
            else "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –≥–∞–∑–æ–≤—ã—Ö —Å–±–æ—Ä–∞—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        await message.reply(error_message)
        print(f"–û—à–∏–±–∫–∞: {e}")
