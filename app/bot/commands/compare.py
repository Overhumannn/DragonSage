import aiohttp  # –î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤
from aiogram import types  # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–∏–ø–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö Telegram
from aiogram.filters import Command  # –î–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥
from aiogram.types import Message  # –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π Telegram
from bot import dp  # –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
from app.database.crud import get_user_language  # –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

@dp.message(Command(commands=['compare']))
async def compare_cryptos(message: Message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        language = get_user_language(message.from_user.id)  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è
        is_russian = (language == 'ru')

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–∏–º–≤–æ–ª—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        args = message.text.split()
        if len(args) < 3:
            if is_russian:
                await message.reply("‚ùóÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /compare [symbol1] [symbol2] ...")
            else:
                await message.reply("‚ùóÔ∏è Please use the command in the format: /compare [symbol1] [symbol2] ...")
            return

        crypto_symbols = [symbol.upper() for symbol in args[1:]]  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–∏–º–≤–æ–ª—ã –≤ –≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä
        symbols_query = ",".join(crypto_symbols)
        url = f"https://min-api.cryptocompare.com/data/pricemultifull?fsyms={symbols_query}&tsyms=USD,ETH"

        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                if response.status != 200:
                    if is_russian:
                        await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç.")
                    else:
                        await message.reply("‚ùå Failed to retrieve data for the specified cryptocurrencies.")
                    return

                data = await response.json()

                if 'RAW' not in data:
                    if is_russian:
                        await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç.")
                    else:
                        await message.reply("‚ùå Failed to retrieve data for the specified cryptocurrencies.")
                    return

                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                comparison_message = "üìä **–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç**:\n" if is_russian else "üìä **Cryptocurrency Comparison**:\n"

                for symbol in crypto_symbols:
                    if symbol in data['RAW']:
                        raw_data_usd = data['RAW'][symbol]['USD']
                        raw_data_eth = data['RAW'][symbol].get('ETH', {})
                        
                        price = raw_data_usd.get('PRICE', 'N/A')
                        market_cap = raw_data_usd.get('MKTCAP', 'N/A')
                        volume_24h = raw_data_usd.get('VOLUME24HOUR', 'N/A')
                        high_24h = raw_data_usd.get('HIGH24HOUR', 'N/A')
                        low_24h = raw_data_usd.get('LOW24HOUR', 'N/A')
                        change_1h = raw_data_usd.get('CHANGEHOUR', 'N/A')
                        change_pct_24h = raw_data_usd.get('CHANGEPCT24HOUR', 'N/A')
                        price_eth = raw_data_eth.get('PRICE', 'N/A')

                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å 'N/A'
                        def format_value(value, decimals=2):
                            if isinstance(value, (int, float)):
                                return f"${value:,.{decimals}f}"
                            return value

                        price_formatted = format_value(price)
                        market_cap_formatted = format_value(market_cap)
                        volume_24h_formatted = format_value(volume_24h)
                        high_24h_formatted = format_value(high_24h)
                        low_24h_formatted = format_value(low_24h)
                        change_1h_formatted = format_value(change_1h)
                        change_pct_24h_formatted = f"{change_pct_24h}%" if change_pct_24h != 'N/A' else 'N/A'
                        price_eth_formatted = f"{price_eth:.6f}" if isinstance(price_eth, (int, float)) else price_eth

                        if is_russian:
                            comparison_message += (
                                f"\nüîπ **{symbol}**\n"
                                f"   üí∞ **–¶–µ–Ω–∞**: {price_formatted}\n"
                                f"   üìä **–†—ã–Ω–æ—á–Ω–∞—è –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è**: {market_cap_formatted}\n"
                                f"   üîÑ **–û–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤ (24—á)**: {volume_24h_formatted}\n"
                                f"   üìà **–ú–∞–∫—Å/–ú–∏–Ω –∑–∞ 24—á**: {high_24h_formatted} / {low_24h_formatted}\n"
                                f"   ‚è≥ **–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 1—á**: {change_1h_formatted}\n"
                                f"   üìâ **–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 24—á**: {change_pct_24h_formatted}\n"
                                f"   ü™ô **1 {symbol} = {price_eth_formatted} ETH**\n"
                            )
                        else:
                            comparison_message += (
                                f"\nüîπ **{symbol}**\n"
                                f"   üí∞ **Price**: {price_formatted}\n"
                                f"   üìä **Market Cap**: {market_cap_formatted}\n"
                                f"   üîÑ **24h Trading Volume**: {volume_24h_formatted}\n"
                                f"   üìà **24h High/Low**: {high_24h_formatted} / {low_24h_formatted}\n"
                                f"   ‚è≥ **1h Change**: {change_1h_formatted}\n"
                                f"   üìâ **24h Change**: {change_pct_24h_formatted}\n"
                                f"   ü™ô **1 {symbol} = {price_eth_formatted} ETH**\n"
                            )
                    else:
                        if is_russian:
                            comparison_message += f"\nüîπ **{symbol}**: –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n"
                        else:
                            comparison_message += f"\nüîπ **{symbol}**: Data not available\n"

                await message.reply(comparison_message, parse_mode="Markdown")

    except Exception as e:
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –Ω—É–∂–Ω–æ–º —è–∑—ã–∫–µ
        if 'is_russian' in locals() and is_russian:
            await message.reply("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        else:
            await message.reply("‚ö†Ô∏è An error occurred while fetching the data. Please try again later.")
        print(f"–û—à–∏–±–∫–∞: {e}")
