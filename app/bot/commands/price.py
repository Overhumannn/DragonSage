import aiohttp
from aiogram import types
from aiogram.filters import Command
from aiogram.types import Message
from bot import dp  # –î–æ—Å—Ç—É–ø –∫ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É –±–æ—Ç–∞
from config import settings  # –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ API –∫–ª—é—á–∞–º
from app.database.crud import get_user_language  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

# –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
LOCALIZATION = {
    "invalid_symbol": {
        "en": "Please provide a valid cryptocurrency symbol. Example: /price BTC",
        "ru": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å–∏–º–≤–æ–ª –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã. –ü—Ä–∏–º–µ—Ä: /price BTC"
    },
    "api_error": {
        "en": "Error fetching data. Please try again later.",
        "ru": "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    },
    "data_not_found": {
        "en": "No data found for this cryptocurrency.",
        "ru": "–î–∞–Ω–Ω—ã–µ –ø–æ —ç—Ç–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
    }
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
def translate(key, lang_code='en'):
    return LOCALIZATION.get(key, {}).get(lang_code, LOCALIZATION[key]['en'])

# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
async def get_crypto_price(symbol):
    url = f"https://min-api.cryptocompare.com/data/pricemultifull?fsyms={symbol}&tsyms=USD,ETH&api_key={settings.crypto_api_key}"
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                if response.status != 200:
                    return None  # –í–µ—Ä–Ω–µ–º None –≤ —Å–ª—É—á–∞–µ –Ω–µ—É–¥–∞—á–∏ –∑–∞–ø—Ä–æ—Å–∞
                return await response.json()
    except aiohttp.ClientError as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return None

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ü–µ–Ω–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
async def format_crypto_message(data, symbol, lang_code='en'):
    try:
        display_data = data['DISPLAY'][symbol]['USD']

        # –ò–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞ 1 —á–∞—Å –∏ 24 —á–∞—Å–∞ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö –∏ –¥–æ–ª–ª–∞—Ä–∞—Ö
        change_hour = display_data.get('CHANGEHOUR', 'N/A')
        change_hour_percent = display_data.get('CHANGEPCTHOUR', 'N/A')
        change_day = display_data.get('CHANGE24HOUR', 'N/A')
        change_day_percent = display_data.get('CHANGEPCT24HOUR', 'N/A')
        btc_to_eth = data['DISPLAY'][symbol].get('ETH', {}).get('PRICE', 'N/A')

        if lang_code == 'ru':
            return (
                f"üí∞ {symbol} - USD\n"
                f"üí≤ –¶–µ–Ω–∞: {display_data['PRICE']}\n"
                f"üíé –ú–∞–∫—Å/–ú–∏–Ω (24—á): {display_data['HIGH24HOUR']} / {display_data['LOW24HOUR']}\n"
                f"‚è≥ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 1—á: {change_hour} USD ({change_hour_percent}%)\n"
                f"üìà –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 24—á: {change_day} USD ({change_day_percent}%)\n"
                f"üè¶ –†—ã–Ω–æ—á–Ω–∞—è –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è: {display_data['MKTCAP']}\n"
                f"üîÑ –û–±—ä–µ–º –∑–∞ 24—á: {display_data['TOTALVOLUME24H']}\n"
                f"ü™ô 1 {symbol} = {btc_to_eth} ETH\n"
            )
        else:
            return (
                f"üí∞ {symbol} - USD\n"
                f"üí≤ Price: {display_data['PRICE']}\n"
                f"üíé H/L (24h): {display_data['HIGH24HOUR']} / {display_data['LOW24HOUR']}\n"
                f"‚è≥ 1h Change: {change_hour} USD ({change_hour_percent}%)\n"
                f"üìà 24h Change: {change_day} USD ({change_day_percent}%)\n"
                f"üè¶ Market Cap: {display_data['MKTCAP']}\n"
                f"üîÑ 24h Volume: {display_data['TOTALVOLUME24H']}\n"
                f"ü™ô 1 {symbol} = {btc_to_eth} ETH\n"
            )
    except KeyError:
        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ
        return translate('data_not_found', lang_code)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /price
@dp.message(Command(commands=['price']))
async def send_price(message: Message):
    user_id = message.from_user.id
    # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏ get_user_language
    lang_code = get_user_language(user_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–∏–º–≤–æ–ª–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –≤ –∫–æ–º–∞–Ω–¥–µ
    if len(message.text.split()) < 2:
        await message.reply(translate('invalid_symbol', lang_code))
        return

    symbol = message.text.split(' ')[1].upper()

    data = await get_crypto_price(symbol)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö
    if data is None:
        await message.reply(translate('api_error', lang_code))
        return

    if 'DISPLAY' not in data or symbol not in data['DISPLAY']:
        await message.reply(translate('invalid_symbol', lang_code))
        return

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    reply_message = await format_crypto_message(data, symbol, lang_code)
    await message.reply(reply_message)
