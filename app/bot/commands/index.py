import aiohttp  # –î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤
from aiogram import types  # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–∏–ø–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö Telegram
from aiogram.filters import Command  # –î–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥
from aiogram.types import Message  # –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π Telegram
from bot import dp  # –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
from config import settings  # –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫, –≤–∫–ª—é—á–∞—è API –∫–ª—é—á–∏
from app.database.crud import get_user_language  # –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
import logging  # –î–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø-10 –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –ø–æ —Ä—ã–Ω–æ—á–Ω–æ–π –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏
async def fetch_top_cryptos():
    url = "https://min-api.cryptocompare.com/data/top/mktcapfull"
    params = {
        'limit': 10,
        'tsym': 'USD',
        'api_key': settings.crypto_api_key
    }

    async with aiohttp.ClientSession() as session:
        async with session.get(url, params=params) as response:
            if response.status == 200:
                data = await response.json()
                return data.get('Data', [])  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–∞–∑–¥–µ–ª Data —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö
            else:
                raise Exception(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {response.status}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /index 
@dp.message(Command(commands=['index']))
async def send_market_index(message: Message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        language = get_user_language(message.from_user.id)  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è
        is_russian = (language == 'ru')

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–ø-10 –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö
        cryptos = await fetch_top_cryptos()

        if not cryptos:
            if is_russian:
                await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–ø-10 –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö.")
            else:
                await message.reply("‚ùå Failed to retrieve data for the top 10 cryptocurrencies.")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if is_russian:
            text = "üìà **–¢–æ–ø-10 –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –ø–æ —Ä—ã–Ω–æ—á–Ω–æ–π –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏**:\n"
        else:
            text = "üìà **Top 10 Cryptocurrencies by Market Cap**:\n"

        for i, crypto in enumerate(cryptos, start=1):
            coin_info = crypto.get('CoinInfo', {})
            display_info = crypto.get('DISPLAY', {}).get('USD', {})

            name = coin_info.get('FullName', 'N/A')
            symbol = coin_info.get('Name', 'N/A')
            price = display_info.get('PRICE', 'N/A')
            change = display_info.get('CHANGEPCT24HOUR', 'N/A')

            if is_russian:
                price_text = f"üí∞ **–¶–µ–Ω–∞**: {price}"
                change_text = f"üìâ **–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 24—á**: {change}"
            else:
                price_text = f"üí∞ **Price**: {price}"
                change_text = f"üìâ **24h Change**: {change}%"

            text += f"{i}. **{symbol} - {name}**\n   {price_text}\n   {change_text}\n"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(text, parse_mode="Markdown")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –Ω—É–∂–Ω–æ–º —è–∑—ã–∫–µ
        if 'is_russian' in locals() and is_russian:
            await message.reply("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.")
        else:
            await message.reply("‚ö†Ô∏è An error occurred while fetching market data.")
