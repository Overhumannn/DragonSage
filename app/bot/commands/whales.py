import time  # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏ –∏ –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏
import aiohttp  # –î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤
import humanize  # –î–ª—è —É–¥–æ–±–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "5 minutes ago")
from aiogram import types  # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–∏–ø–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö Telegram
from aiogram.filters import Command  # –î–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥
from aiogram.types import Message  # –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π Telegram
from bot import dp  # –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
from binance.client import Client  # –î–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å API Binance
from config import settings  # –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫, –≤–∫–ª—é—á–∞—è API –∫–ª—é—á–∏
from app.database.crud import get_user_language  # –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
import logging  # –î–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Binance –∫–ª–∏–µ–Ω—Ç–∞
binance_client = Client(settings.binance_api_key, settings.binance_api_secret)

# –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —ç–º–æ–¥–∑–∏ –¥–ª—è —Å–¥–µ–ª–æ–∫
strength_emojis = ["üí™", "üß†", "üèãÔ∏è", "ü•á", "üèÜ", "‚öîÔ∏è", "üîß", "üèÖ", "üéØ", "üöÄ"]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –∫—Ä—É–ø–Ω—ã—Ö —Å–¥–µ–ª–∫–∞—Ö —á–µ—Ä–µ–∑ API Binance
async def fetch_large_orders(symbol, minutes=60):
    url = f"https://api.binance.com/api/v3/aggTrades"
    params = {
        'symbol': symbol.upper().replace("/", ""),  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–∏–º–≤–æ–ª –ø–∞—Ä—ã –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        'limit': 1000,  # –õ–∏–º–∏—Ç –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫ –∑–∞ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å
    }

    start_time = int(time.time() * 1000) - minutes * 60 * 1000

    all_trades = []
    async with aiohttp.ClientSession() as session:
        while True:
            async with session.get(url, params=params) as response:
                if response.status == 200:
                    data = await response.json()

                    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–¥–µ–ª–æ–∫ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
                    trades_in_timeframe = [trade for trade in data if int(trade['T']) >= start_time]
                    all_trades.extend(trades_in_timeframe)

                    # –ï—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω–æ –º–µ–Ω—å—à–µ 1000 —Å–¥–µ–ª–æ–∫ –∏–ª–∏ —É–∂–µ —Å–æ–±—Ä–∞–ª–∏ 10 000 —Å–¥–µ–ª–æ–∫, –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
                    if len(data) < 1000 or len(all_trades) >= 10000:
                        break

                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º fromId –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–¥–µ–ª–∫–∏
                    params['fromId'] = data[-1]['a']
                else:
                    raise Exception(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {response.status} - {await response.text()}")

            # –ï—Å–ª–∏ —Å–æ–±—Ä–∞–Ω–æ 10 000 —Å–¥–µ–ª–æ–∫, –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª
            if len(all_trades) >= 10000:
                break

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö –æ–± –æ–±—ä–µ–º–µ
    large_orders = sorted(all_trades, key=lambda x: float(x['q']), reverse=True)[:10]

    return large_orders

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /whales
@dp.message(Command(commands=['whales']))
async def send_large_orders(message: Message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        language = get_user_language(message.from_user.id)  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è
        is_russian = (language == 'ru')

        # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —Å–∏–º–≤–æ–ª
        args = message.text.split()[1:]
        if len(args) != 1:
            if is_russian:
                await message.reply("‚ùóÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤—É—é –ø–∞—Ä—É. –ù–∞–ø—Ä–∏–º–µ—Ä: /–∫–∏—Ç—ã BTCUSDT")
            else:
                await message.reply("‚ùóÔ∏è Please specify the trading pair. For example: /whales BTCUSDT")
            return

        symbol = args[0]

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫—Ä—É–ø–Ω—ã—Ö —Å–¥–µ–ª–∫–∞—Ö (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 60 –º–∏–Ω—É—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        large_orders = await fetch_large_orders(symbol)

        if large_orders:
            if is_russian:
                orders_message = f"üêã **{symbol.upper()}** –Ω–∞ Binance\nüêã **–ö—Ä—É–ø–Ω–µ–π—à–∏–µ –æ—Ä–¥–µ—Ä–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 60 –º–∏–Ω—É—Ç**\n\n"
            else:
                orders_message = f"üêã **{symbol.upper()}** on Binance\nüêã **Biggest Orders in the Last 60 Minutes**\n\n"

            for i, order in enumerate(large_orders):  # –í—ã–≤–æ–¥–∏–º —Ç–æ–ø-10 –∫—Ä—É–ø–Ω–µ–π—à–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤
                volume = float(order['q'])
                price = float(order['p'])
                volume_usdt = volume * price  # –ü–µ—Ä–µ–≤–æ–¥–∏–º –æ–±—ä–µ–º –≤ USDT
                formatted_volume = f"{volume_usdt / 1000000:.2f}M USDT" if volume_usdt >= 1000000 else f"{volume_usdt:.2f} USDT"
                order_time = humanize.naturaltime(time.time() - (int(order['T']) / 1000))
                emoji = strength_emojis[i % len(strength_emojis)]  # –í—ã–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —ç–º–æ–¥–∑–∏
                if is_russian:
                    orders_message += f"{emoji} **{formatted_volume}** | {order_time}\n"
                else:
                    orders_message += f"{emoji} **{formatted_volume}** | {order_time}\n"

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await message.reply(orders_message, parse_mode="Markdown")
        else:
            if is_russian:
                await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫—Ä—É–ø–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏.")
            else:
                await message.reply("‚ùå No large orders found for the specified time period.")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –Ω—É–∂–Ω–æ–º —è–∑—ã–∫–µ
        if 'is_russian' in locals() and is_russian:
            await message.reply("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Å–¥–µ–ª–∫–∞—Ö.")
        else:
            await message.reply("‚ö†Ô∏è An error occurred while fetching trade data.")
