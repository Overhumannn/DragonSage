import requests
import logging
from aiogram import types
from aiogram.filters import Command
from bot import dp
from app.database.crud import get_user_language

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

@dp.message(Command(commands=['scam_token']))
async def scam_token_handler(message: types.Message):
    try:
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ —Ç–æ–∫–µ–Ω–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        token_address = message.text.split()[1]

        # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = message.from_user.id
        language = get_user_language(user_id)

        # –í—ã–ø–æ–ª–Ω—è–µ–º GET –∑–∞–ø—Ä–æ—Å –∫ Honeypot API
        response = requests.get(
            'https://api.honeypot.is/v2/IsHoneypot',
            params={'address': token_address}
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ
        response.raise_for_status()

        data = response.json()

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –¥–≤—É—Ö —è–∑—ã–∫–∞—Ö
        if language == 'ru':
            honeypot_true_msg = f"‚ùóÔ∏è –¢–æ–∫–µ–Ω {token_address} <b>–Ø–í–õ–Ø–ï–¢–°–Ø</b> –º–æ—à–µ–Ω–Ω–∏—á–µ—Å–∫–∏–º!"
            honeypot_false_msg = f"‚úÖ –¢–æ–∫–µ–Ω {token_address} <b>–ù–ï</b> —è–≤–ª—è–µ—Ç—Å—è –º–æ—à–µ–Ω–Ω–∏—á–µ—Å–∫–∏–º."
            risk_level_msg = f"–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: {data.get('summary', {}).get('risk', 'unknown')} ({data.get('summary', {}).get('riskLevel', 'N/A')})"
            http_error_msg = "‚ùóÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–∫–µ–Ω –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ API. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            request_error_msg = "‚ùóÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–∫–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            invalid_address_msg = "‚ùóÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /scam_token."
        else:
            honeypot_true_msg = f"‚ùóÔ∏è The token {token_address} <b>IS</b> a honeypot!"
            honeypot_false_msg = f"‚úÖ The token {token_address} is <b>NOT</b> a honeypot."
            risk_level_msg = f"Risk level: {data.get('summary', {}).get('risk', 'unknown')} ({data.get('summary', {}).get('riskLevel', 'N/A')})"
            http_error_msg = "‚ùóÔ∏è Failed to check the token due to an API error. Please try again later."
            request_error_msg = "‚ùóÔ∏è Failed to check the token. Please try again later."
            invalid_address_msg = "‚ùóÔ∏è Please provide a token address after the /scam_token command."

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ Honeypot –ø—Ä–æ–≤–µ—Ä–∫–∏
        if data['honeypotResult']['isHoneypot']:
            await message.answer(honeypot_true_msg, parse_mode='HTML')
        else:
            await message.answer(honeypot_false_msg, parse_mode='HTML')

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∏—Å–∫–∞—Ö
        await message.answer(risk_level_msg, parse_mode='HTML')
    
    except requests.exceptions.HTTPError as http_err:
        logging.error(f"HTTP error occurred: {http_err}")
        await message.answer(http_error_msg, parse_mode='HTML')
    
    except requests.exceptions.RequestException as err:
        logging.error(f"Error occurred: {err}")
        await message.answer(request_error_msg, parse_mode='HTML')
    
    except IndexError:
        await message.answer(invalid_address_msg, parse_mode='HTML')



@dp.message(Command(commands=['scam_liquidity']))
async def scam_liquidity_handler(message: types.Message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        user_language = get_user_language(message.from_user.id)

        # –°–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –¥–≤—É—Ö —è–∑—ã–∫–æ–≤
        invalid_address_msg = "‚ùóÔ∏è Please provide a token address after the /scam_liquidity command." if user_language == 'en' else "‚ùóÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /scam_liquidity."
        no_liquidity_msg = "‚ùóÔ∏è No liquidity found for the token." if user_language == 'en' else "‚ùóÔ∏è –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –¥–ª—è —Ç–æ–∫–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
        
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ —Ç–æ–∫–µ–Ω–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        try:
            token_address = message.text.split()[1]
        except IndexError:
            await message.answer(invalid_address_msg, parse_mode='HTML')
            return

        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
        logging.info(f"Checking liquidity for token address: {token_address}")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º GET –∑–∞–ø—Ä–æ—Å –∫ Honeypot API (–≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ –∫ endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏)
        response = requests.get(
            'https://api.honeypot.is/v2/IsHoneypot',  # –ù—É–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
            params={'address': token_address}
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ
        response.raise_for_status()
        
        # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        logging.info(f"Received liquidity response for token address: {token_address}")

        data = response.json()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
        if not data.get('pair'):
            await message.answer(no_liquidity_msg, parse_mode='HTML')
        else:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—è 'name' –≤ –æ–±—ä–µ–∫—Ç–µ 'pair'
            liquidity = data['pair'].get('liquidity', 'N/A')

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
            result_msg = (f"üíß The token {token_address} has liquidity and can be traded on DEX." 
                          if user_language == 'en' else 
                          f"üíß –¢–æ–∫–µ–Ω {token_address} –∏–º–µ–µ—Ç –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –∏ –º–æ–∂–µ—Ç —Ç–æ—Ä–≥–æ–≤–∞—Ç—å—Å—è –Ω–∞ DEX.")
            await message.answer(result_msg, parse_mode='HTML')

    except requests.exceptions.HTTPError as http_err:
        logging.error(f"HTTP error occurred: {http_err}")
        error_msg = "‚ùóÔ∏è Failed to check the token due to an API error. Please try again later." if user_language == 'en' else "‚ùóÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–∫–µ–Ω –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        await message.answer(error_msg)
    
    except requests.exceptions.RequestException as err:
        logging.error(f"Error occurred: {err}")
        error_msg = "‚ùóÔ∏è Failed to check the token. Please try again later." if user_language == 'en' else "‚ùóÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–∫–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        await message.answer(error_msg)




@dp.message(Command(commands=['scam_flags']))
async def scam_flags_handler(message: types.Message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        user_language = get_user_language(message.from_user.id)

        # –°–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –¥–≤—É—Ö —è–∑—ã–∫–æ–≤
        invalid_address_msg = "‚ùóÔ∏è Please provide a token address after the /scam_flags command." if user_language == 'en' else "‚ùóÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /scam_flags."
        no_flags_msg = "‚úÖ No flags found for this token." if user_language == 'en' else "‚úÖ –§–ª–∞–≥–∏ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
        error_msg = "‚ùóÔ∏è Failed to check the token. Please try again later." if user_language == 'en' else "‚ùóÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–∫–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ —Ç–æ–∫–µ–Ω–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        try:
            token_address = message.text.split()[1]
        except IndexError:
            await message.answer(invalid_address_msg, parse_mode='HTML')
            return

        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
        logging.info(f"Checking flags for token address: {token_address}")

        # –í—ã–ø–æ–ª–Ω—è–µ–º GET –∑–∞–ø—Ä–æ—Å –∫ Honeypot API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–ª–∞–≥–æ–≤
        response = requests.get(
            'https://api.honeypot.is/v2/IsHoneypot',  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL –¥–ª—è —Ñ–ª–∞–≥–æ–≤ —Ç–æ–∫–µ–Ω–∞, –µ—Å–ª–∏ –µ—Å—Ç—å –¥—Ä—É–≥–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
            params={'address': token_address}
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ
        response.raise_for_status()

        # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        logging.info(f"Received flags response for token address: {token_address}")

        data = response.json()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–ª–∞–≥–æ–≤
        flags = data.get('flags', [])
        if not flags:
            await message.answer(no_flags_msg, parse_mode='HTML')
        else:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–ª–∞–≥–∞–º–∏
            flag_messages = []
            for flag in flags:
                severity = flag.get('severity', 'N/A')
                description = flag.get('description', 'No description available')

                # –≠–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–µ–ø–µ–Ω–∏ —Ç—è–∂–µ—Å—Ç–∏ —Ñ–ª–∞–≥–∞
                if severity == 'critical':
                    emoji = "üî¥"
                elif severity == 'high':
                    emoji = "üü†"
                elif severity == 'medium':
                    emoji = "üü°"
                else:
                    emoji = "üîµ"  # –ù–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è

                # –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–ª–∞–≥–∞
                flag_msg = f"{emoji} <b>{severity.capitalize()}</b>: {description}"
                flag_messages.append(flag_msg)

            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Ñ–ª–∞–≥–∏ –≤ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
            flags_result = "\n".join(flag_messages)

            result_msg = (f"‚ö†Ô∏è <b>Token Flags:</b>\n{flags_result}" if user_language == 'en'
                          else f"‚ö†Ô∏è <b>–§–ª–∞–≥–∏ —Ç–æ–∫–µ–Ω–∞:</b>\n{flags_result}")
            await message.answer(result_msg, parse_mode='HTML')

    except requests.exceptions.HTTPError as http_err:
        logging.error(f"HTTP error occurred: {http_err}")
        await message.answer(error_msg, parse_mode='HTML')
    
    except requests.exceptions.RequestException as err:
        logging.error(f"Error occurred: {err}")
        await message.answer(error_msg, parse_mode='HTML')



@dp.message(Command(commands=['scam_limits']))
async def scam_limits_handler(message: types.Message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        user_language = get_user_language(message.from_user.id)

        # –°–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –¥–≤—É—Ö —è–∑—ã–∫–æ–≤
        invalid_address_msg = "‚ùóÔ∏è Please provide a token address after the /scam_limits command." if user_language == 'en' else "‚ùóÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /scam_limits."
        no_limits_msg = "‚úÖ No buy or sell limits found for this token." if user_language == 'en' else "‚úÖ –õ–∏–º–∏—Ç—ã –Ω–∞ –ø–æ–∫—É–ø–∫—É –∏–ª–∏ –ø—Ä–æ–¥–∞–∂—É —Ç–æ–∫–µ–Ω–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
        
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ —Ç–æ–∫–µ–Ω–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        try:
            token_address = message.text.split()[1]
        except IndexError:
            await message.answer(invalid_address_msg, parse_mode='HTML')
            return

        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
        logging.info(f"Checking buy/sell limits for token address: {token_address}")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º GET –∑–∞–ø—Ä–æ—Å –∫ Honeypot API
        response = requests.get(
            'https://api.honeypot.is/v2/IsHoneypot',
            params={'address': token_address}
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ
        response.raise_for_status()
        
        # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        logging.info(f"Received buy/sell limits response for token address: {token_address}")

        data = response.json()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ª–∏–º–∏—Ç–æ–≤ –Ω–∞ –ø–æ–∫—É–ø–∫—É –∏ –ø—Ä–æ–¥–∞–∂—É
        max_buy = data.get('simulationResult', {}).get('maxBuy', {}).get('token', None)
        max_sell = data.get('simulationResult', {}).get('maxSell', {}).get('token', None)

        # –ï—Å–ª–∏ –ª–∏–º–∏—Ç—ã –Ω–∞ –ø–æ–∫—É–ø–∫—É –∏ –ø—Ä–æ–¥–∞–∂—É –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
        if not max_buy and not max_sell:
            await message.answer(no_limits_msg, parse_mode='HTML')
        else:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ª–∏–º–∏—Ç–æ–≤
            buy_msg = f"üí∞ <b>Max buy</b>: {max_buy} tokens" if max_buy else ""
            sell_msg = f"üí∞ <b>Max sell</b>: {max_sell} tokens" if max_sell else ""
            
            if user_language == 'en':
                result_msg = f"{buy_msg}\n{sell_msg}" if buy_msg or sell_msg else no_limits_msg
            else:
                result_msg = f"{buy_msg}\n{sell_msg}" if buy_msg or sell_msg else "‚úÖ –õ–∏–º–∏—Ç—ã –Ω–∞ –ø–æ–∫—É–ø–∫—É –∏–ª–∏ –ø—Ä–æ–¥–∞–∂—É —Ç–æ–∫–µ–Ω–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."

            await message.answer(result_msg, parse_mode='HTML')

    except requests.exceptions.HTTPError as http_err:
        logging.error(f"HTTP error occurred: {http_err}")
        error_msg = "‚ùóÔ∏è Failed to check the token due to an API error. Please try again later." if user_language == 'en' else "‚ùóÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–∫–µ–Ω –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        await message.answer(error_msg)
    
    except requests.exceptions.RequestException as err:
        logging.error(f"Error occurred: {err}")
        error_msg = "‚ùóÔ∏è Failed to check the token. Please try again later." if user_language == 'en' else "‚ùóÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–∫–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        await message.answer(error_msg)






@dp.message(Command(commands=['scam_fees']))
async def scam_gas_fees_handler(message: types.Message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        user_language = get_user_language(message.from_user.id)

        # –°–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –¥–≤—É—Ö —è–∑—ã–∫–æ–≤
        invalid_address_msg = "‚ùóÔ∏è Please provide a token address after the /scam_fees command." if user_language == 'en' else "‚ùóÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /scam_fees."
        low_fees_msg = "üí∏ Low fees. Buy: {buy_gas} GWEI, Sell: {sell_gas} GWEI." if user_language == 'en' else "üí∏ –ù–∏–∑–∫–∏–µ –∫–æ–º–∏—Å—Å–∏–∏. –ü–æ–∫—É–ø–∫–∞: {buy_gas} GWEI, –ü—Ä–æ–¥–∞–∂–∞: {sell_gas} GWEI."
        high_fees_msg = "‚ö†Ô∏è High fees! Buy: {buy_gas} GWEI, Sell: {sell_gas} GWEI." if user_language == 'en' else "‚ö†Ô∏è –í—ã—Å–æ–∫–∏–µ –∫–æ–º–∏—Å—Å–∏–∏! –ü–æ–∫—É–ø–∫–∞: {buy_gas} GWEI, –ü—Ä–æ–¥–∞–∂–∞: {sell_gas} GWEI."
        
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ —Ç–æ–∫–µ–Ω–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        try:
            token_address = message.text.split()[1]
        except IndexError:
            await message.answer(invalid_address_msg, parse_mode='HTML')
            return

        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
        logging.info(f"Checking gas fees for token address: {token_address}")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º GET –∑–∞–ø—Ä–æ—Å –∫ Honeypot API
        response = requests.get(
            'https://api.honeypot.is/v2/IsHoneypot',
            params={'address': token_address}
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ
        response.raise_for_status()
        
        # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        logging.info(f"Received gas fees response for token address: {token_address}")

        data = response.json()

        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ –≥–∞–∑–æ–≤—ã–º —Å–±–æ—Ä–∞–º
        buy_gas = data.get('simulationResult', {}).get('buyGas', None)
        sell_gas = data.get('simulationResult', {}).get('sellGas', None)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –≤—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–µ–ª–∏—á–∏–Ω—ã –∫–æ–º–∏—Å—Å–∏–π
        if buy_gas and sell_gas:
            buy_gas = int(buy_gas)
            sell_gas = int(sell_gas)

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –∫–æ–º–∏—Å—Å–∏–π
            if buy_gas < 100 and sell_gas < 100:
                result_msg = low_fees_msg.format(buy_gas=buy_gas, sell_gas=sell_gas)
            else:
                result_msg = high_fees_msg.format(buy_gas=buy_gas, sell_gas=sell_gas)

            await message.answer(result_msg, parse_mode='HTML')

        else:
            # –°–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–æ–º–∏—Å—Å–∏—è–º –Ω–µ –±—ã–ª–∏ –Ω–∞–π–¥–µ–Ω—ã
            no_fees_msg = "‚ùóÔ∏è No gas fee data found for this token." if user_language == 'en' else "‚ùóÔ∏è –î–∞–Ω–Ω—ã–µ –æ –∫–æ–º–∏—Å—Å–∏—è—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–∫–µ–Ω–∞."
            await message.answer(no_fees_msg, parse_mode='HTML')

    except requests.exceptions.HTTPError as http_err:
        logging.error(f"HTTP error occurred: {http_err}")
        error_msg = "‚ùóÔ∏è Failed to check the token due to an API error. Please try again later." if user_language == 'en' else "‚ùóÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–∫–µ–Ω –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        await message.answer(error_msg)
    
    except requests.exceptions.RequestException as err:
        logging.error(f"Error occurred: {err}")
        error_msg = "‚ùóÔ∏è Failed to check the token. Please try again later." if user_language == 'en' else "‚ùóÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–∫–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        await message.answer(error_msg)





@dp.message(Command(commands=['scam_holder_analysis']))
async def scam_holder_analysis_handler(message: types.Message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_language = get_user_language(message.from_user.id)

        # –°–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –¥–≤—É—Ö —è–∑—ã–∫–æ–≤
        invalid_address_msg = "‚ùóÔ∏è Please provide a token address after the /scam_holder_analysis command." if user_language == 'en' else "‚ùóÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /scam_holder_analysis."

        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ —Ç–æ–∫–µ–Ω–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        try:
            token_address = message.text.split()[1]
        except IndexError:
            await message.answer(invalid_address_msg, parse_mode='HTML')
            return

        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
        logging.info(f"Checking holder analysis for token address: {token_address}")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Honeypot API
        response = requests.get(
            'https://api.honeypot.is/v2/IsHoneypot',
            params={'address': token_address}
        )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–∞
        response.raise_for_status()

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –æ—Ç–≤–µ—Ç–∞
        data = response.json()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –æ—Ç–≤–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ holderAnalysis
        if 'holderAnalysis' in data:
            successful_holders = int(data['holderAnalysis']['successful'])
            failed_holders = int(data['holderAnalysis']['failed'])

            # –ï—Å–ª–∏ –≤—Å–µ –≤–ª–∞–¥–µ–ª—å—Ü—ã –º–æ–≥—É—Ç –ø—Ä–æ–¥–∞—Ç—å —Å–≤–æ–∏ —Ç–æ–∫–µ–Ω—ã
            if failed_holders == 0:
                success_message = "‚úÖ All holders successfully sold their tokens." if user_language == 'en' else "‚úÖ –í—Å–µ –≤–ª–∞–¥–µ–ª—å—Ü—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–∞–ª–∏ —Å–≤–æ–∏ —Ç–æ–∫–µ–Ω—ã."
                await message.answer(success_message, parse_mode='HTML')
            else:
                failure_message = (f"‚ö†Ô∏è Some holders cannot sell their tokens! Number of holders with issues: {failed_holders}." 
                                   if user_language == 'en' else 
                                   f"‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –≤–ª–∞–¥–µ–ª—å—Ü—ã –Ω–µ –º–æ–≥—É—Ç –ø—Ä–æ–¥–∞—Ç—å —Å–≤–æ–∏ —Ç–æ–∫–µ–Ω—ã! –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏: {failed_holders}.")
                await message.answer(failure_message, parse_mode='HTML')
        else:
            # –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ holderAnalysis –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
            no_data_message = "‚ùóÔ∏è No holder analysis data available for this token." if user_language == 'en' else "‚ùóÔ∏è –î–∞–Ω–Ω—ã–µ –æ –≤–ª–∞–¥–µ–ª—å—Ü–∞—Ö –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç."
            await message.answer(no_data_message, parse_mode='HTML')

    except requests.exceptions.HTTPError as http_err:
        logging.error(f"HTTP error occurred: {http_err}")
        error_message = "‚ùóÔ∏è Failed to analyze the token due to an API error. Please try again later." if user_language == 'en' else "‚ùóÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑ —Ç–æ–∫–µ–Ω–∞ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        await message.answer(error_message)
    
    except requests.exceptions.RequestException as err:
        logging.error(f"Error occurred: {err}")
        error_message = "‚ùóÔ∏è Failed to analyze the token. Please try again later." if user_language == 'en' else "‚ùóÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑ —Ç–æ–∫–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        await message.answer(error_message)



@dp.message(Command(commands=['scam_contract']))
async def scam_contract_handler(message: types.Message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        user_language = get_user_language(message.from_user.id)

        # –°–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –¥–≤—É—Ö —è–∑—ã–∫–æ–≤
        invalid_address_msg = "‚ùóÔ∏è Please provide a token address after the /scam_contract command." if user_language == 'en' else "‚ùóÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /scam_contract."
        no_contract_data_msg = "‚ùóÔ∏è No contract data available for this token." if user_language == 'en' else "‚ùóÔ∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞."
        contract_open_msg = "‚úÖ The smart contract is open-source and contains no proxy calls." if user_language == 'en' else "‚úÖ –°–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç –∏–º–µ–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã–π –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–æ–∫—Å–∏-–≤—ã–∑–æ–≤–æ–≤."
        contract_closed_msg = "‚ö†Ô∏è Warning! The smart contract is closed and may contain hidden functions." if user_language == 'en' else "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –°–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç –∑–∞–∫—Ä—ã—Ç –∏ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–∫—Ä—ã—Ç—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏."
        
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ —Ç–æ–∫–µ–Ω–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        try:
            token_address = message.text.split()[1]
        except IndexError:
            await message.answer(invalid_address_msg, parse_mode='HTML')
            return

        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
        logging.info(f"Checking contract for token address: {token_address}")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º GET –∑–∞–ø—Ä–æ—Å –∫ Honeypot API –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
        response = requests.get(
            'https://api.honeypot.is/v2/IsHoneypot',  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
            params={'address': token_address}
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ
        response.raise_for_status()

        # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        logging.info(f"Received contract data for token address: {token_address}")

        data = response.json()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ
        if 'contractCode' not in data:
            await message.answer(no_contract_data_msg, parse_mode='HTML')
            return
        
        contract_data = data['contractCode']

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –æ—Ç–∫—Ä—ã—Ç –ª–∏ –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –∏ –µ—Å—Ç—å –ª–∏ –ø—Ä–æ–∫—Å–∏-–≤—ã–∑–æ–≤—ã
        if contract_data.get('openSource', False) and not contract_data.get('hasProxyCalls', False):
            await message.answer(contract_open_msg, parse_mode='HTML')
        else:
            await message.answer(contract_closed_msg, parse_mode='HTML')

    except requests.exceptions.HTTPError as http_err:
        logging.error(f"HTTP error occurred: {http_err}")
        error_msg = "‚ùóÔ∏è Failed to check the token due to an API error. Please try again later." if user_language == 'en' else "‚ùóÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–∫–µ–Ω –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        await message.answer(error_msg)
    
    except requests.exceptions.RequestException as err:
        logging.error(f"Error occurred: {err}")
        error_msg = "‚ùóÔ∏è Failed to check the token. Please try again later." if user_language == 'en' else "‚ùóÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–∫–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        await message.answer(error_msg)







@dp.message(Command(commands=['scam_simulate_trade']))
async def scam_simulate_trade_handler(message: types.Message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        user_language = get_user_language(message.from_user.id)

        # –°–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –¥–≤—É—Ö —è–∑—ã–∫–æ–≤
        invalid_address_msg = "‚ùóÔ∏è Please provide a token address after the /scam_simulate_trade command." if user_language == 'en' else "‚ùóÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /scam_simulate_trade."
        simulation_failed_msg = "‚ùå Simulation failed. Issues with liquidity or inability to sell the token." if user_language == 'en' else "‚ùå –°–∏–º—É–ª—è—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å. –ü—Ä–æ–±–ª–µ–º—ã —Å –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å—é –∏–ª–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–∞—Ç—å —Ç–æ–∫–µ–Ω."
        simulation_successful_msg = "‚úÖ Simulation successful. The token can be sold on the market with minimal issues." if user_language == 'en' else "‚úÖ –°–∏–º—É–ª—è—Ü–∏—è —É—Å–ø–µ—à–Ω–∞. –¢–æ–∫–µ–Ω –º–æ–∂–Ω–æ –ø—Ä–æ–¥–∞—Ç—å –Ω–∞ —Ä—ã–Ω–∫–µ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏."
        
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ —Ç–æ–∫–µ–Ω–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        try:
            token_address = message.text.split()[1]
        except IndexError:
            await message.answer(invalid_address_msg, parse_mode='HTML')
            return

        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–∏–º—É–ª—è—Ü–∏–∏
        logging.info(f"Simulating trade for token address: {token_address}")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º GET –∑–∞–ø—Ä–æ—Å –∫ Honeypot API –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏
        response = requests.get(
            'https://api.honeypot.is/v2/IsHoneypot',  # –ó–¥–µ—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏
            params={'address': token_address, 'simulateLiquidity': True}
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞
        response.raise_for_status()

        # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        logging.info(f"Received simulation response for token address: {token_address}")

        data = response.json()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ —Å–∏–º—É–ª—è—Ü–∏–∏
        if data.get('simulationSuccess', False):
            await message.answer(simulation_successful_msg, parse_mode='HTML')
        else:
            await message.answer(simulation_failed_msg, parse_mode='HTML')

    except requests.exceptions.HTTPError as http_err:
        logging.error(f"HTTP error occurred: {http_err}")
        error_msg = "‚ùóÔ∏è Failed to simulate the trade due to an API error. Please try again later." if user_language == 'en' else "‚ùóÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–∏–º—É–ª—è—Ü–∏—é –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        await message.answer(error_msg)
    
    except requests.exceptions.RequestException as err:
        logging.error(f"Error occurred: {err}")
        error_msg = "‚ùóÔ∏è Failed to simulate the trade. Please try again later." if user_language == 'en' else "‚ùóÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–∏–º—É–ª—è—Ü–∏—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        await message.answer(error_msg)
    
    except IndexError:
        await message.answer(invalid_address_msg, parse_mode='HTML')


