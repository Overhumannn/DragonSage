import logging
import random
import aiohttp
from datetime import datetime, timedelta
import requests

from aiogram import types
from aiogram.filters import Command
from aiogram.types import Message

from app.database.crud import get_user_language
from bot import dp  # –í–∞—à —ç–∫–∑–µ–º–ø–ª—è—Ä Dispatcher
from config import settings

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –°–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–æ–≤ —Å —ç–º–æ–¥–∑–∏
messages = {
    'en': {
        'no_symbol': [
            "‚ùó Please specify a cryptocurrency symbol. For example: /dex BTC",
            "üîç Please provide a crypto symbol. Example: /dex BTC",
            "ü§î What crypto are you interested in? For example: /dex BTC"
        ],
        'price': [
            "üí∞ The price of {symbol} is {price} USDT.",
            "üìà {symbol} is currently trading at {price} USDT.",
            "üíπ {symbol} price: {price} USDT."
        ],
        'error': [
            "‚ö†Ô∏è Error: {error_message}",
            "‚ùå Error: {error_message}",
            "üö´ Error: {error_message}"
        ],
        'unknown_error': [
            "‚ùì Could not retrieve the price. Please try again later.",
            "üòï Couldn't get the price. Try again later.",
            "üîÑ Unable to fetch the price at this time. Please try again."
        ],
        'api_error': [
            "üîß Failed to retrieve data from CryptoCompare API.",
            "üõ†Ô∏è API Error: Unable to get data from CryptoCompare.",
            "üì° Could not connect to CryptoCompare API."
        ],
        'wbtc_info': [
            "‚ÑπÔ∏è Note: On DEX platforms like Uniswap, BTC is often represented as WBTC (Wrapped BTC). Using WBTC for price queries.",
            "üìù Note: BTC is represented as WBTC on DEX platforms like Uniswap. Using WBTC for price queries.",
            "üîç Note: On DEXs such as Uniswap, BTC is usually WBTC (Wrapped BTC). Using WBTC for price queries."
        ]
    },
    'ru': {
        'no_symbol': [
            "‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å–∏–º–≤–æ–ª –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã. –ù–∞–ø—Ä–∏–º–µ—Ä: /dex BTC",
            "üîç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ —Å–∏–º–≤–æ–ª –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã. –ü—Ä–∏–º–µ—Ä: /dex BTC",
            "ü§î –ö–∞–∫—É—é –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å? –ù–∞–ø—Ä–∏–º–µ—Ä: /dex BTC"
        ],
        'price': [
            "üí∞ –¶–µ–Ω–∞ {symbol} —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {price} USDT.",
            "üìà {symbol} —Å–µ–π—á–∞—Å —Ç–æ—Ä–≥—É–µ—Ç—Å—è –ø–æ {price} USDT.",
            "üíπ –¶–µ–Ω–∞ {symbol}: {price} USDT."
        ],
        'error': [
            "‚ö†Ô∏è –û—à–∏–±–∫–∞: {error_message}",
            "‚ùå –û—à–∏–±–∫–∞: {error_message}",
            "üö´ –û—à–∏–±–∫–∞: {error_message}"
        ],
        'unknown_error': [
            "‚ùì –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            "üòï –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            "üîÑ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        ],
        'api_error': [
            "üîß –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç CryptoCompare API.",
            "üõ†Ô∏è –û—à–∏–±–∫–∞ API: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç CryptoCompare.",
            "üì° –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ CryptoCompare API."
        ],
        'wbtc_info': [
            "‚ÑπÔ∏è –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ù–∞ DEX-–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö, —Ç–∞–∫–∏—Ö –∫–∞–∫ Uniswap, BTC —á–∞—Å—Ç–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω –∫–∞–∫ WBTC (Wrapped BTC). –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è WBTC –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ —Ü–µ–Ω.",
            "üìù –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: BTC –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω –∫–∞–∫ WBTC –Ω–∞ DEX-–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö, —Ç–∞–∫–∏—Ö –∫–∞–∫ Uniswap. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è WBTC –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ —Ü–µ–Ω.",
            "üîç –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ù–∞ DEX, —Ç–∞–∫–∏—Ö –∫–∞–∫ Uniswap, BTC –æ–±—ã—á–Ω–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω –∫–∞–∫ WBTC (Wrapped BTC). –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è WBTC –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ —Ü–µ–Ω."
        ]
    },
    # –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ —è–∑—ã–∫–∏, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
}

@dp.message(Command('dex'))
async def dex_command_handler(message: Message):
    logger.info(f"Received /dex command from user {message.from_user.id}")

    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_language = get_user_language(message.from_user.id)
        logger.debug(f"User language: {user_language}")
    except Exception as e:
        logger.error(f"Error fetching user language: {e}")
        user_language = 'en'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é

    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π, –µ—Å–ª–∏ —è–∑—ã–∫ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
    lang = messages.get(user_language, messages['en'])

    # –ü–æ–ª—É—á–∞–µ–º —Å–∏–º–≤–æ–ª –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    args = message.text.strip().split()
    if len(args) < 2:
        logger.warning(f"No symbol provided by user {message.from_user.id}")
        response = random.choice(lang['no_symbol'])
        await message.reply(response)
        return

    symbol = args[1].upper()
    logger.info(f"Fetching price for symbol: {symbol}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —Å–∏–º–≤–æ–ª BTC, –∑–∞–º–µ–Ω—è–µ–º –µ–≥–æ –Ω–∞ WBTC
    if symbol == 'BTC':
        symbol = 'WBTC'
        logger.info("Symbol BTC detected. Using WBTC for query.")
        response = random.choice(lang['wbtc_info'])
        await message.reply(response)

    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ API –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –±–∏—Ä–∂–∏
    url = 'https://min-api.cryptocompare.com/data/price'
    params = {
        'fsym': symbol,
        'tsyms': 'USDT',
        'api_key': settings.crypto_api_key  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–º—è –∞—Ç—Ä–∏–±—É—Ç–∞
        # 'e': exchange  # –£–¥–∞–ª–µ–Ω–æ
    }
    logger.debug(f"API request URL: {url} with params: {params}")

    try:
        # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
        async with aiohttp.ClientSession() as session:
            async with session.get(url, params=params) as resp:
                logger.debug(f"API response status: {resp.status}")
                if resp.status == 200:
                    data = await resp.json()
                    logger.debug(f"API response data: {data}")
                    if 'USDT' in data:
                        price = data['USDT']
                        logger.info(f"Price fetched: {symbol} = {price} USDT")
                        response = random.choice(lang['price']).format(symbol=symbol, price=price)
                        await message.reply(response)
                    elif 'Response' in data and data['Response'] == 'Error':
                        error_message = data.get('Message', 'Unknown error.')
                        logger.error(f"API Error: {error_message}")
                        response = random.choice(lang['error']).format(error_message=error_message)
                        await message.reply(response)
                    else:
                        logger.warning("Unknown API response structure.")
                        response = random.choice(lang['unknown_error'])
                        await message.reply(response)
                else:
                    logger.error(f"API request failed with status {resp.status}")
                    response = random.choice(lang['api_error'])
                    await message.reply(response)
    except Exception as e:
        logger.exception(f"Exception during API request: {e}")
        response = random.choice(lang['unknown_error'])
        await message.reply(response)










# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –°–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —ç–º–æ–¥–∑–∏ –¥–ª—è —Ç–æ–ø-10 —Ç–æ–∫–µ–Ω–æ–≤
token_emojis = [
    "üî•", "üåü", "üöÄ", "üíé", "‚ö°Ô∏è", "üìà", "üåà", "üõ°Ô∏è", "üí∞", "üéØ"
]

# –°–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–æ–≤ —Å —ç–º–æ–¥–∑–∏
messages = {
    'en': {
        'no_data': [
            "üòî No data available at the moment. Please try again later.",
            "üìâ Unable to retrieve data currently. Try again later.",
            "üîÑ Data is not available right now. Please try again."
        ],
        'top_tokens': [
            "üöÄ Top {limit} Fastest Growing Tokens on Uniswap in the Ethereum network:\n",
            "üìà Top {limit} Rapidly Rising Tokens on Uniswap in the Ethereum network:\n",
            "üíπ Top {limit} High-Growth Tokens on Uniswap in the Ethereum network:\n"
        ],
        'token_format': "{rank}. {emoji} {symbol} ({name}) - ${price:.6f} (+{change:.2f}% in 24h)\n",
        'error': [
            "‚ö†Ô∏è Error: {error_message}",
            "‚ùå Error: {error_message}",
            "üö´ Error: {error_message}"
        ],
        'unknown_error': [
            "‚ùì Could not retrieve the data. Please try again later.",
            "üòï Couldn't get the data. Try again later.",
            "üîÑ Unable to fetch the data at this time. Please try again."
        ],
        'api_error': [
            "üîß Failed to retrieve data from The Graph API.",
            "üõ†Ô∏è API Error: Unable to get data from The Graph.",
            "üì° Could not connect to The Graph API."
        ],
    },
    'ru': {
        'no_data': [
            "üòî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            "üìâ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            "üîÑ –î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã —Å–µ–π—á–∞—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        ],
        'top_tokens': [
            "üöÄ –¢–û–ü {limit} –Ω–∞–∏–±–æ–ª–µ–µ –±—ã—Å—Ç—Ä–æ—Ä–∞—Å—Ç—É—â–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ Uniswap –≤ —Å–µ—Ç–∏ Ethereum:\n",
            "üìà –¢–û–ü {limit} –±—ã—Å—Ç—Ä–æ—Ä–∞—Å—Ç—É—â–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ Uniswap –≤ —Å–µ—Ç–∏ Ethereum:\n",
            "üíπ –¢–û–ü {limit} —Ç–æ–∫–µ–Ω–æ–≤ —Å –≤—ã—Å–æ–∫–∏–º —Ä–æ—Å—Ç–æ–º –Ω–∞ Uniswap –≤ —Å–µ—Ç–∏ Ethereum:\n"
        ],
        'token_format': "{rank}. {emoji} {symbol} ({name}) - ${price:.6f} (+{change:.2f}% –∑–∞ 24—á)\n",
        'error': [
            "‚ö†Ô∏è –û—à–∏–±–∫–∞: {error_message}",
            "‚ùå –û—à–∏–±–∫–∞: {error_message}",
            "üö´ –û—à–∏–±–∫–∞: {error_message}"
        ],
        'unknown_error': [
            "‚ùì –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            "üòï –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            "üîÑ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        ],
        'api_error': [
            "üîß –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç The Graph API.",
            "üõ†Ô∏è –û—à–∏–±–∫–∞ API: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç The Graph.",
            "üì° –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ The Graph API."
        ],
    },
    # –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ —è–∑—ã–∫–∏, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
}

@dp.message(Command('dex_eth'))
async def dex_eth_command_handler(message: Message):
    logger.info(f"Received /dex_eth command from user {message.from_user.id}")

    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_language = get_user_language(message.from_user.id)
        logger.debug(f"User language: {user_language}")
    except Exception as e:
        logger.error(f"Error fetching user language: {e}")
        user_language = 'en'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é

    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π, –µ—Å–ª–∏ —è–∑—ã–∫ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
    lang = messages.get(user_language, messages['en'])

    limit = 10  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –≤ –¢–û–ü–µ

    # –í—ã—á–∏—Å–ª—è–µ–º –º–µ—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –∏ –≤—á–µ—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è
    today = datetime.utcnow()
    yesterday = today - timedelta(days=1)

    try:
        today_date = datetime(today.year, today.month, today.day)
        yesterday_date = datetime(yesterday.year, yesterday.month, yesterday.day)

        today_timestamp = int(today_date.timestamp())
        yesterday_timestamp = int(yesterday_date.timestamp())

        logger.debug(f"Timestamps - Today: {today_timestamp}, Yesterday: {yesterday_timestamp}")
    except Exception as e:
        logger.error(f"Error processing dates: {e}")
        response = random.choice(lang['unknown_error'])
        await message.reply(response)
        return

    # GraphQL –∑–∞–ø—Ä–æ—Å –∫ —Å—É–±–≥—Ä–∞—Ñ—É Uniswap –Ω–∞ Arbitrum
    graphql_query = """
    {
      tokens(first: 100, orderBy: totalValueLockedUSD, orderDirection: desc) {
        id
        symbol
        name
        totalValueLockedUSD
        tokenDayData(first: 2, orderBy: date, orderDirection: desc) {
          date
          priceUSD
        }
      }
    }
    """

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π URL –∏ API-–∫–ª—é—á
    api_key = settings.thegraph_api_key
    subgraph_id = '5zvR82QoaXYFyDEKLZ9t6v9adgnptxYpKpSbxtgVENFV'

    url = f'https://gateway.thegraph.com/api/{api_key}/subgraphs/id/{subgraph_id}'

    logger.debug(f"GraphQL endpoint URL: {url}")

    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(url, json={'query': graphql_query}) as resp:
                logger.debug(f"GraphQL response status: {resp.status}")
                if resp.status == 200:
                    data = await resp.json()
                    tokens = data.get('data', {}).get('tokens', [])
                    logger.debug(f"Fetched {len(tokens)} tokens")

                    token_changes = []

                    for token in tokens:
                        token_day_data = token.get('tokenDayData', [])
                        if len(token_day_data) >= 2:
                            today_data = token_day_data[0]
                            yesterday_data = token_day_data[1]

                            price_today = float(today_data.get('priceUSD', 0))
                            price_yesterday = float(yesterday_data.get('priceUSD', 0))

                            if price_yesterday > 0 and price_today > 0:
                                price_change = ((price_today - price_yesterday) / price_yesterday) * 100
                                token_changes.append({
                                    'symbol': token.get('symbol'),
                                    'name': token.get('name'),
                                    'price': price_today,
                                    'change': price_change
                                })
                                logger.debug(f"{token.get('symbol')}: Price Today = {price_today}, Price Yesterday = {price_yesterday}, Change = {price_change}%")

                    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω—ã –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–º—É –∏–∑–º–µ–Ω–µ–Ω–∏—é —Ü–µ–Ω—ã
                    sorted_tokens = sorted(token_changes, key=lambda x: x['change'], reverse=True)

                    if not sorted_tokens:
                        response = random.choice(lang['no_data'])
                        await message.reply(response)
                        return

                    top_tokens = sorted_tokens[:limit]
                    header = random.choice(lang['top_tokens']).format(limit=limit)
                    token_list = ""
                    for idx, token in enumerate(top_tokens, start=1):
                        emoji = token_emojis[idx - 1] if idx - 1 < len(token_emojis) else ''
                        token_list += lang['token_format'].format(
                            rank=idx,
                            emoji=emoji,
                            symbol=token['symbol'],
                            name=token['name'],
                            price=token['price'],
                            change=token['change']
                        )

                    response = header + token_list
                    await message.reply(response)
                else:
                    error_text = await resp.text()
                    logger.error(f"GraphQL request failed with status {resp.status}: {error_text}")
                    response = random.choice(lang['api_error'])
                    await message.reply(response)
    except Exception as e:
        logger.exception(f"Exception during GraphQL request: {e}")
        response = random.choice(lang['unknown_error'])
        await message.reply(response)














# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

# –≠–º–æ–¥–∑–∏ –¥–ª—è —Ç–æ–ø-10 —Ç–æ–∫–µ–Ω–æ–≤
token_emojis = [
    "üî•", "üåü", "üöÄ", "üíé", "‚ö°Ô∏è", "üìà", "üåà", "üõ°Ô∏è", "üí∞", "üéØ"
]

# –°–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–æ–≤
messages = {
    'en': {
        'no_data': "üòî No data available at the moment. Please try again later.",
        'top_tokens': "üöÄ Top {limit} Fastest Growing Tokens on Tron DEX:\n",
        'token_format': "{rank}. {emoji} {symbol} ({name}) - ${price:.6f} ({change:+.2f}% in 24h)\n",
        'error': "‚ö†Ô∏è Error: {error_message}",
    },
    'ru': {
        'no_data': "üòî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
        'top_tokens': "üöÄ –¢–û–ü {limit} –Ω–∞–∏–±–æ–ª–µ–µ –±—ã—Å—Ç—Ä–æ—Ä–∞—Å—Ç—É—â–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ Tron DEX:\n",
        'token_format': "{rank}. {emoji} {symbol} ({name}) - ${price:.6f} ({change:+.2f}% –∑–∞ 24—á)\n",
        'error': "‚ö†Ô∏è –û—à–∏–±–∫–∞: {error_message}",
    }
}

@dp.message(Command('dex_tron'))
async def dex_tron_command_handler(message: types.Message):
    logger.info(f"Received /dex_tron command from user {message.from_user.id}")

    lang = messages.get('ru')

    # URL API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø-10 –Ω–∞–∏–±–æ–ª–µ–µ –±—ã—Å—Ç—Ä–æ—Ä–∞—Å—Ç—É—â–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ Tron
    url = "https://apilist.tronscanapi.com/api/tokens/overview"
    params = {
        "start": 0,
        "limit": 500,   # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–æ–∫–µ–Ω–æ–≤
        "order": "desc",  # –í –ø–æ—Ä—è–¥–∫–µ —É–±—ã–≤–∞–Ω–∏—è
        "filter": "all",  # –í–∫–ª—é—á–∞–µ–º –≤—Å–µ —Ç–∏–ø—ã —Ç–æ–∫–µ–Ω–æ–≤
        "sort": "gain",   # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ø—Ä–∏—Ä–æ—Å—Ç—É
        "showAll": 1,     # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ —Ç–æ–∫–µ–Ω—ã, –≤–∫–ª—é—á–∞—è —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
        "verifier": "all",
        "field": ""
    }

    headers = {
        "Accept": "application/json",
        "TRON-PRO-API-KEY": settings.tron_api_key
    }

    try:
        async with aiohttp.ClientSession() as session:
            logger.debug(f"Requesting URL: {url} with params: {params} and headers: {headers}")
            async with session.get(url, params=params, headers=headers) as resp:
                logger.debug(f"Received response with status code: {resp.status}")
                text = await resp.text()
                logger.debug(f"Response text: {text}")  # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
                if resp.status != 200:
                    raise Exception(
                        f"Unexpected status code: {resp.status}, response: {text}"
                    )
                data = await resp.json()
                tokens = data.get('tokens', [])
                logger.info(f"Fetched {len(tokens)} tokens from TronScan API")

        # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω–æ–≤ –Ω–µ—Ç, –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if not tokens:
            await message.reply(lang['no_data'])
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤ —Å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º –ø—Ä–∏—Ä–æ—Å—Ç–æ–º
        token_changes = []
        for token in tokens:
            price_in_usd = token.get('priceInUsd')
            gain = token.get('gain')
            symbol = token.get('abbr', 'N/A')
            name = token.get('name', 'N/A')

            logger.debug(f"Token: {symbol}, Gain: {gain}, Price: {price_in_usd}")

            if gain is not None and price_in_usd is not None:
                try:
                    gain_value = float(gain)
                    price = float(price_in_usd)
                    # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ 'gain' —É–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 24 —á–∞—Å–∞
                    # –ï—Å–ª–∏ 'gain' - —ç—Ç–æ –¥–µ—Å—è—Ç–∏—á–Ω–∞—è –¥—Ä–æ–±—å, —É–º–Ω–æ–∂–∞–µ–º –Ω–∞ 100
                    change = gain_value * 100 if abs(gain_value) < 100 else gain_value
                    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–∫–µ–Ω—ã —Å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º –ø—Ä–∏—Ä–æ—Å—Ç–æ–º
                    if change > 0:
                        token_changes.append({
                            'symbol': symbol,
                            'name': name,
                            'price': price,
                            'change': change
                        })
                except ValueError as e:
                    logger.debug(f"Error parsing price or gain for token {symbol}: {e}")
                    continue

        logger.info(f"Tokens with valid gain and price: {len(token_changes)}")

        if not token_changes:
            await message.reply(lang['no_data'])
            return

        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∏–∑–º–µ–Ω–µ–Ω–∏—é —Ü–µ–Ω—ã –∑–∞ 24 —á–∞—Å–∞
        sorted_tokens = sorted(token_changes, key=lambda x: x['change'], reverse=True)

        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-10 —Ç–æ–∫–µ–Ω–æ–≤ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º —Ä–æ—Å—Ç–æ–º
        top_tokens = sorted_tokens[:10]

        logger.info(f"Top tokens selected: {len(top_tokens)}")

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        token_list = ""
        for idx, token in enumerate(top_tokens, start=1):
            emoji = token_emojis[idx - 1] if idx - 1 < len(token_emojis) else ''
            token_list += lang['token_format'].format(
                rank=idx,
                emoji=emoji,
                symbol=token['symbol'],
                name=token['name'],
                price=token['price'],
                change=token['change']
            )

        response_message = lang['top_tokens'].format(limit=10) + token_list
        await message.reply(response_message)

    except aiohttp.ClientError as e:
        logger.error(f"API request error: {e}")
        await message.reply(lang['error'].format(error_message="–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API"))
    except Exception as e:
        logger.exception(f"Unexpected error: {e}")
        await message.reply(lang['error'].format(error_message="–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞"))