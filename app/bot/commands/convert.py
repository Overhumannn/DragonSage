import random  # –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö —ç–º–æ–¥–∑–∏ 
from aiogram import types  # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–∏–ø–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö Telegram
from aiogram.filters import Command  # –î–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥
from aiogram.types import Message  # –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π Telegram
from bot import dp  # –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
from config import settings  # –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫, –≤–∫–ª—é—á–∞—è API –∫–ª—é—á–∏
from binance.client import Client  # –î–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å API Binance
from binance.exceptions import BinanceAPIException  # –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π Binance
from app.database.crud import get_user_language  # –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

binance_client = Client(settings.binance_api_key, settings.binance_api_secret)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
def get_available_symbols():
    exchange_info = binance_client.get_exchange_info()
    return {symbol['symbol'] for symbol in exchange_info['symbols'] if symbol['status'] == 'TRADING'}

available_symbols = get_available_symbols()

@dp.message(Command(commands=['convert', '–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å']))
async def convert_currency(message: Message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        language = get_user_language(message.from_user.id)  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è
        is_russian = (language == 'ru')

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–º–∞–Ω–¥—ã
        args = message.text.split()
        if len(args) != 4:
            if is_russian:
                await message.reply(
                    "‚ùóÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /convert [from_symbol] [to_symbol] [amount]"
                )
            else:
                await message.reply(
                    "‚ùóÔ∏è Please use the command in the format: /convert [from_symbol] [to_symbol] [amount]"
                )
            return

        from_symbol = args[1].upper()
        to_symbol = args[2].upper()
        try:
            amount = float(args[3])
            if amount <= 0:
                raise ValueError("Amount must be positive.")
        except ValueError:
            if is_russian:
                await message.reply("‚ùóÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—É—é —Å—É–º–º—É –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏.")
            else:
                await message.reply("‚ùóÔ∏è Please provide a valid positive amount for conversion.")
            return

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–∏–º–≤–æ–ª—ã –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è API Binance (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTCUSDT)
        direct_pair = f"{from_symbol}{to_symbol}"
        indirect_pair_from = f"{from_symbol}USDT"
        indirect_pair_to = f"{to_symbol}USDT"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä—è–º–æ–π –ø–∞—Ä—ã
        if direct_pair in available_symbols:
            symbol_pair = direct_pair
            try:
                ticker = binance_client.get_symbol_ticker(symbol=symbol_pair)
                price = float(ticker['price'])
                converted_amount = amount * price
                conversion_type = 'direct'
            except BinanceAPIException as e:
                if e.code == -1121:
                    if is_russian:
                        await message.reply(
                            f"‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Å–∏–º–≤–æ–ª: {symbol_pair}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤."
                        )
                    else:
                        await message.reply(
                            f"‚ùå Invalid symbol: {symbol_pair}. Please check the symbols you entered."
                        )
                    return
                else:
                    if is_russian:
                        await message.reply("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ API Binance. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                    else:
                        await message.reply("‚ö†Ô∏è An error occurred while communicating with Binance API. Please try again later.")
                    print(f"Binance API –æ—à–∏–±–∫–∞: {e}")
                    return
        else:
            # –ï—Å–ª–∏ –ø—Ä—è–º–∞—è –ø–∞—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –≤—ã–ø–æ–ª–Ω—è–µ–º –∫–æ—Å–≤–µ–Ω–Ω—É—é –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é —á–µ—Ä–µ–∑ USDT
            if indirect_pair_from not in available_symbols:
                if is_russian:
                    await message.reply(
                        f"‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Å–∏–º–≤–æ–ª: {indirect_pair_from}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤."
                    )
                else:
                    await message.reply(
                        f"‚ùå Invalid symbol: {indirect_pair_from}. Please check the symbols you entered."
                    )
                return
            if indirect_pair_to not in available_symbols:
                if is_russian:
                    await message.reply(
                        f"‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Å–∏–º–≤–æ–ª: {indirect_pair_to}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤."
                    )
                else:
                    await message.reply(
                        f"‚ùå Invalid symbol: {indirect_pair_to}. Please check the symbols you entered."
                    )
                return

            try:
                # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É from_symbol –≤ USDT
                ticker_from = binance_client.get_symbol_ticker(symbol=indirect_pair_from)
                price_from = float(ticker_from['price'])
                
                # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É to_symbol –≤ USDT
                ticker_to = binance_client.get_symbol_ticker(symbol=indirect_pair_to)
                price_to = float(ticker_to['price'])
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º amount from_symbol –≤ USDT, –∑–∞—Ç–µ–º –≤ to_symbol
                usdt_amount = amount * price_from
                converted_amount = usdt_amount / price_to
                conversion_type = 'indirect'
            except BinanceAPIException as e:
                if e.code == -1121:
                    if is_russian:
                        await message.reply(
                            f"‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Å–∏–º–≤–æ–ª –ø—Ä–∏ –∫–æ—Å–≤–µ–Ω–Ω–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤."
                        )
                    else:
                        await message.reply(
                            f"‚ùå Invalid symbol during indirect conversion. Please check the symbols you entered."
                        )
                    return
                else:
                    if is_russian:
                        await message.reply("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ API Binance. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                    else:
                        await message.reply("‚ö†Ô∏è An error occurred while communicating with Binance API. Please try again later.")
                    print(f"Binance API –æ—à–∏–±–∫–∞: {e}")
                    return

        # –í—ã–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
        conversion_emoji = random.choice(["üí±", "üîÑ", "üîÅ"])
        rate_emoji = random.choice(["üìâ", "üìà", "üíµ"])
        result_emoji = random.choice(["üí∞", "üè¶", "üí∏"])

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if is_russian:
            if conversion_type == 'direct':
                response_message = (
                    f"{conversion_emoji} –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è {amount} {from_symbol} –≤ {to_symbol}:\n"
                    f"{rate_emoji} –ö—É—Ä—Å: 1 {from_symbol} = {price:.2f} {to_symbol}\n"
                    f"{result_emoji} –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: {converted_amount:.2f} {to_symbol}"
                )
            else:
                response_message = (
                    f"{conversion_emoji} –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è {amount} {from_symbol} –≤ {to_symbol} —á–µ—Ä–µ–∑ USDT:\n"
                    f"{rate_emoji} –ö—É—Ä—Å {from_symbol}/USDT: {price_from:.2f} USDT\n"
                    f"{rate_emoji} –ö—É—Ä—Å {to_symbol}/USDT: {price_to:.2f} USDT\n"
                    f"{result_emoji} –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: {converted_amount:.6f} {to_symbol}"
                )
        else:
            if conversion_type == 'direct':
                response_message = (
                    f"{conversion_emoji} Conversion of {amount} {from_symbol} to {to_symbol}:\n"
                    f"{rate_emoji} Rate: 1 {from_symbol} = {price:.2f} {to_symbol}\n"
                    f"{result_emoji} Total amount: {converted_amount:.2f} {to_symbol}"
                )
            else:
                response_message = (
                    f"{conversion_emoji} Conversion of {amount} {from_symbol} to {to_symbol} via USDT:\n"
                    f"{rate_emoji} {from_symbol}/USDT Rate: {price_from:.2f} USDT\n"
                    f"{rate_emoji} {to_symbol}/USDT Rate: {price_to:.2f} USDT\n"
                    f"{result_emoji} Total amount: {converted_amount:.6f} {to_symbol}"
                )

        await message.reply(response_message)

    except BinanceAPIException as e:
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π Binance, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
        if is_russian:
            await message.reply("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ API Binance. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        else:
            await message.reply("‚ö†Ô∏è An error occurred while communicating with Binance API. Please try again later.")
        print(f"Binance API –æ—à–∏–±–∫–∞: {e}")
    except Exception as e:
        # –í —Å–ª—É—á–∞–µ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –Ω—É–∂–Ω–æ–º —è–∑—ã–∫–µ
        if 'is_russian' in locals() and is_russian:
            await message.reply("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∞–ª—é—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        else:
            await message.reply("‚ö†Ô∏è An error occurred while trying to convert currencies. Please try again later.")
        print(f"–û—à–∏–±–∫–∞: {e}")
